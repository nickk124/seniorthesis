%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: datapoint_med.pdf
%%Creator: Adobe Acrobat 19.10.0
%%For: nickk124
%%CreationDate: 4/18/2019, 1:09:23 AM
%%BoundingBox: 0 0 524 693
%%HiResBoundingBox: 0 0 523.4560 693
%%CropBox: 0 0 523.4560 693
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1081 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreatorTool="Adobe Illustrator(TM) 7.0"
   xmp:ModifyDate="2019-04-18T01:09:06-04:00"
   xmp:CreateDate="2019-04-16T23:51:09-04:00"
   xmp:MetadataDate="2019-04-18T01:09:06-04:00"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 19.0 (Windows)"
   xmpMM:DocumentID="uuid:6bffdc67-6e56-4b92-9196-c45583df1c00"
   xmpMM:InstanceID="uuid:8c2f8346-39ac-4524-b788-92c2ed497a79">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">dia1e_new.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Adam Trotter</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -693 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 693 li
523.456 693 li
523.456 0 li
cp
clp
gsave
18.788 98.56 mo
505.228 98.56 li
505.228 584.94 li
18.788 584.94 li
cp
clp
178.728 -83.02 mo
16.687 -83.02 -114.671 127.321 -114.671 386.784 cv
-114.671 646.258 16.687 856.58 178.728 856.58 cv
340.772 856.58 472.127 646.258 472.127 386.784 cv
472.127 127.321 340.772 -83.02 178.728 -83.02 cv
false sop
/1 
[/DeviceCMYK] /CSA add_res
.104 .077 .082 0 cmyk
f
182.728 67.58 mo
74.701 67.58 -12.872 207.808 -12.872 380.783 cv
-12.872 553.765 74.701 693.98 182.728 693.98 cv
290.757 693.98 378.328 553.765 378.328 380.783 cv
378.328 207.808 290.757 67.58 182.728 67.58 cv
.212 .165 .17 0 cmyk
f
grestore
186.737 219.865 mo
132.723 219.865 88.937 289.979 88.937 376.467 cv
88.937 462.958 132.723 533.065 186.737 533.065 cv
240.752 533.065 284.537 462.958 284.537 376.467 cv
284.537 289.979 240.752 219.865 186.737 219.865 cv
false sop
.438 .359 .363 .013 cmyk
f
gsave
501.948 583 mo
20.508 583 li
20.508 101.56 li
501.948 101.56 li
cp
clp
4 lw
0 lc
0 lj
4 ml
[] 0 dsh
false sadj
-60.293 -221.188 mo
37.909 -15 149.146 191.458 300.427 364.172 cv
395.063 472.217 515.919 578.11 661.866 603.932 cv
913.048 648.374 1109.62 442.272 1246.51 259.77 cv
.75 .68 .67 .902 cmyk
@
grestore
279.216 369.844 mo
283.281 376.279 li
279.216 382.717 li
279.174 382.717 li
279.174 369.844 li
279.216 369.844 li
1 /0 /CSD get_res sepcs
1 sep
f
2 lw
0 lc
0 lj
4 ml
[] 0 dsh
false sadj
279.216 369.844 mo
283.281 376.279 li
279.216 382.717 li
279.174 382.717 li
279.174 369.844 li
279.216 369.844 li
cp
@
191.664 528.269 mo
185.227 532.334 li
178.791 528.269 li
178.791 528.227 li
191.664 528.227 li
191.664 528.269 li
f
191.664 528.269 mo
185.227 532.334 li
178.791 528.269 li
178.791 528.227 li
191.664 528.227 li
191.664 528.269 li
cp
@
4 lw
186.94 376.312 mo
282.516 376.25 li
.75 .68 .67 .902 cmyk
@
2 ml
185.228 376.157 mo
185.291 530.28 li
@
185.561 582.614 mo
185.561 100.947 li
f
2 lw
4 ml
185.561 582.614 mo
185.561 100.947 li
@
240.967 256.21 mo
248.551 255.556 li
252.401 262.124 li
252.382 262.162 li
240.948 256.247 li
240.967 256.21 li
1 /0 /CSD get_res sepcs
1 sep
f
240.967 256.21 mo
248.551 255.556 li
252.401 262.124 li
252.382 262.162 li
240.948 256.247 li
240.967 256.21 li
cp
@
187.855 376.907 mo
.75 .68 .67 .902 cmyk
f
187.855 376.907 mo
@
244.449 299.28 mo
f
187.895 373.947 mo
f
187.895 373.947 mo
@
186.352 377.446 mo
f
186.352 377.446 mo
@
gsave
18.788 98.56 mo
505.228 98.56 li
505.228 584.94 li
18.788 584.94 li
cp
clp
4 lw
83.743 88.449 mo
470.283 589.378 li
0 1 1 0 cmyk
@
grestore
311.228 363.78 mo
f
311.228 363.78 mo
@
311.228 206.78 mo
f
311.228 206.78 mo
@
3 lw
[4 4 ] 0 dsh
261.908 377.78 mo
261.908 444.706 228.024 498.961 186.228 498.961 cv
144.432 498.961 110.547 444.706 110.547 377.78 cv
110.547 310.854 144.432 256.601 186.228 256.601 cv
228.024 256.601 261.908 310.854 261.908 377.78 cv
cp
0 .994 1 0 cmyk
@
.75 .68 .67 .902 cmyk
%ADOBeginSubsetFont: VBAAAA+TimesNewRomanPS-BoldItalicMT Initial
ct_T42Dict begin
-0.547 -0.305 1.398 1.031
 256 array 0 1 255 {1 index exch /.notdef put} for  /VBAAAA+TimesNewRomanPS-BoldItalicMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32f932b9c7000000cc000000606376
74200b9ce43b0000012c000007a86670676d4a5f6448000008d400000634
676c796630773df10000921c0000124068656164e7a0997c00000f080000
0036686865610e56116400000f4000000024686d7478f24f665700000f64
000037e86c6f636100f9bdc20000474c000037ec6d617870134c03bf0000
7f38000000206e616d657554b00100007f580000088f70726570d3359107
000087e800000a32676469720000000000000000000000000003034c02bc
00050008059a0533002c0125059a0533004c03a000660212010502020703
060505090304e0000eff4000785b0000000100000000544d432000210020
fffc056bfe460133072101bb400001bfdff700000383054c000000200008
058e0000054c001f054c001c0394001b0000ffe10000ffe40000ffe8fe4a
fffc056b0023fe6affe00313000000fc000000fc00000000000000000025
00f30120005f005500ea0032007400cf0055004b00af013f000900f50108
00260080001701540002001600b800d3005000f00023ffbe00dd00f70035
ffe9001102b6004900a901490158002e003b008601080023003f0039003a
004e00e3013f003d010a000900710108feff004c0082009c00c700d80015
003a006d035105d800280028009f05b800500064001500da015b017cffc2
ffd8fff40099ffff001d002d00d9011c01740446004e007200be00dd09b5
0038004b006d009d0118001b003c005c0069007a00a800c60122fff2000d
008600e3022b055200300047009100f4040104c9ffafffc1ffd5002c003b
003b003e004b006b009900a500b801c002210343ff8c0041004b005f009a
00a600be010a01dc031e0390ff6700250031005d006e00b600c000d000d3
010a015001bc0274027b02d7000900360048004c005c006f008400930095
00a600a800ac00b000b700bc00c00104013601370145019403b6fd81fe3f
00070019003a003b005b00b800c500e100f801160127012c013401470149
015d01bc03ed04740532053eff00ff970008000f005c006d007000820089
008b00a700c100f600f80129017aff72ff88000000000025003e0059006d
007100720081008100bc00dd00de011401150150019c01d6027e0404041c
ff7b002000390046004c004d005a0068006c00720080008300a300ce00d1
00e200ed0107011f0126013f016a01e0035e03a303a703cc05d805f0fed8
ff78ffaeffe1ffe7001900240041005500580071008200860088009000b0
00bb00c200c400d000ed00f700f801150118011f012c015e017c019801a2
01cc01d201fa022b026d02cf02cf02df0333039103e304ab04fc04fe0588
05e706bffed1ff4a000000010003000400170024003c004d0056005c0067
007700a800b000b800c300c600c800e900eb00f500f8010a010c01270135
01350139013f0149014d0197019801c701ee023d02500258026d026f0294
02b30300031a032a0361039603a104330440047904da04e804fb057b058c
05ab0761fe60fe99ff00ff13ff2fff47ffed00180031003f004c006b0074
0078007c00840094009700b000b600b700d800da00e200e400e500eb00ee
00ef00f600fa0106010c011101110114013b013e01450149014d015b0164
016f0184019101b301b901d101e101e501ef0205020602220236023b023e
024102600276029a029a029d02c402ee03130327032b0373038c03ba03c2
03d2040f0485051505320532054905610595069906a80727074807620810
08ccfd2afddefe23fe44fe67fe96feacff24ff41ff5cff61ff9effa3ffb7
ffc2ffc5ffcaffddfff0000000000003000800100018001c0023002b0030
003e0046004b0052005e005e006e007a007b00830085008a009100920098
00a800af00b600cc00ce00cf00d200e700f100f200fa01010108010b0112
012601270127012e013601370138013b013e0140015b016a017001740179
018201840188018d0192019b01a001a001a001ab01b801bc01c001cc01da
01dc01e001e0020102100214021d022902300230024302460269027a0284
029502a302b402c102c202cf02dd02e102ec02f00310033a034503880399
03ad03bd03d403d503e303ea03f304260426046e04d104e00513054b0576
05a305b705c205f8063b065b06b806e80706071a0724075007a907d407ff
082700f6012600f100df000000000000000000000000038402af02f301b8
0205017a04910491049e019f0425049e019f049e019f027a005101ac0261
0319033b021c033b01ee01880278020a01ee033b029f002400240261019e
015e017100440149028400990284009902840025004100450298020501c9
024904440188044400000000023005d30415035d01810023016e003504c9
005b059604910025026202dd01d00434030a0319031e03c1049e05e8035c
00000282ffef040d03ce0209010c01f6025303a202df02d0000a00d60082
00000032010901a201af01770204027a019e02eb019b01ec024e0326045b
03ee03c3042600b703620031004f0027ffee01240096036700d703750291
032603260041004501d7007402ff02a50216029f017a0100031c005000b7
012b016800f9003101a8013a00a801cc00f3012502020021007301c70603
021b0142010501e1012403350272018c044301e50282010f02fe01ee034a
02c50210024e022a02a501cf005f00b1026603b203580115008e015d02a5
00d1fee201b0010b015a0395005900f70783031b008b045d00a101440100
009400b4febf03c600e803ce017303e6012e0222049500390023033b01b8
000003f00140015303b401a805ee061801c6007d00cd00d1037c008500bd
00ccfc47fcb1008402a7fccb046402ba0167032b00700136000001320068
030c0155001bfe6fffc60249013102f1fe79feb4fcf2ff4203adfc0efc61
032a00c3009100a10077004c0002015e008400860023005d004b010a01b8
0086ffc500a80072008800590028009901350015003d0056007a00f801d6
00090007000f00e2001700bc016a00ed0274005b0136000000ab00800050
05a50090fe40013a004800db018b00b300480420040e022b0457008c0082
0082002203d703f1045840425554403f3e3d3c3b3a393837353433323130
2f2e2d2c2b2a292827262524232221201f1e1d1c1b1a1918171615141312
11100f0e0d0c0b0a090807060504030201002c4523466020b02660b00426
2348482d2c452346236120b02661b004262348482d2c45234660b0206120
b04660b004262348482d2c4523462361b0206020b02661b02061b0042623
48482d2c45234660b0406120b06660b004262348482d2c4523462361b040
6020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd
442320b8015a51582320b08d44235920b0ed51582320b04d44235920b090
51582320b00d44235921212d2c20204518684420b001602045b04676688a
4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b01723
70b101173e01b0172370b10217453ab10200080d2d2c45b01a234445b019
23442d2c2045b00325456164b050515845441b2121592d2cb00143632362
b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c20
69b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b0036159
2d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb01243
588745b0112bb0172344b0177ae41b038a45186920b01723448a8a8720b0
a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2cb00225
46608a46b040618c482d2c01182f2d2c20b0032545b019234445b01a2344
4565234520b00325606a20b009234223688a6a606120b01a8ab000527921
b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb114008a5279
b31940201945208a54582321b03f1b235961442d2cb110114323430b2d2c
b10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e
0f432343650b2d2cb11011432343650b2d2c4b525845441b2121592d2c01
20b003252349b04060b0206320b000525823b002253823b002256538008a
63381b212121212159012d2c4bb06451584569b00943608a103a1b212110
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b
2d2c3eb02a2a2d2c352d2c76b802df23701020b802df4520b0005058b001
61593a2f182d2c21210c6423648bb84000622d2c21b08051580c6423648b
b82000621bb200402f2b59b002602d2c21b0c051580c6423648bb8155562
1bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb4000100
000015b00826b00826b00826b008260f10161345683ab001162d2cb40001
00000015b00826b00826b00826b008260f1016134568653ab001162d2c4b
53234b515a5820458a60441b2121592d2c4b545820458a60441b2121592d
2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb013435803
1b02592d2cb0134358021b03592d2c4b54b012435c5a58381b2121592d2c
b012435c580cb00425b00425060c6423646164b807085158b00425b00425
012046b01060482046b0106048590a21211b2121592d2cb012435c580cb0
0425b00425060c6423646164b807085158b00425b00425012046b8fff060
482046b8fff06048590a21211b2121592d2c4b53234b515a58b03a2b1b21
21592d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab012435c
5a58381b2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58
381b2121592d2c462346608a8a462320468a608a61b8ff8062232010238a
b903bc03bc8a70456020b0005058b00161b8ffba8b1bb0468c59b0106068
013a2d2cb1020042b123018851b1400188535a58b910000020885458b202
010243604259b12401885158b920000040885458b2020202436042b12401
885458b2022002436042004b014b5258b2020802436042591bb940000080
885458b202040243604259b94000008063b80100885458b2020802436042
59b94000010063b80200885458b202100243604259b12601885158b94000
020063b80400885458b202400243604259b94000040063b80800885458b2
02800243604259b12801885158b94000080063b81000885458ba00020100
0002436042595959595959592d2cb0024354584b53234b515a58381b2121
591b21212121592d000100000007000042c94a245f0f3cf5081908000000
0000a31fbca400000000d67a920bfb9ffd8c0b3508420000000900010001
00000000000100000721fe4500570ac7fb9ffa460b350018000700000000
00000000000000000dfa0639011c000000000200000002000000031d0071
04710151040000500400004f06aa00dd0639005e0239013f02aa006702aa
ff19040000f6048f00500200ffc602aa000d0200ffe50239ff5a04000071
040000300400000804000019040000240400004e0400007b040000f10400
004c0400005702aa005202aa0001048f0050048f0050048f0050040000b5
06a8fff80556ff8c0556ffcc0556008605c7ffb60556ffb80556000005c7
008e0639ffbe031dffb80400fff00556ffbe04e3ffbe071dffbb05c7ffbe
05c7006d04e3ffc305c7006d0556ffbf0473ffd304e300a305c700c00556
00f3071d00fc0556ff8404e300be04e3ffc802aaffc5023900a002aaff1d
048f00d00400ff4c02aa00f40400002804000013038d003604000029038d
002d02aafeb80400ff9604730019023900290239feb60400000c0239001e
063900140473001a040000320400ff0604000027031d0023031dffff0239
002704730046038d0039055600390400ffa3038dff40031dffeb02c90057
01c3009f02c9ff41048f00270556ff8c0556ff8c055600860556ffb805c7
ffbe05c7006d05c700c00400002804000028040000280400002804000028
04000028038d0036038d002d038d002d038d002d038d002d0239002d0239
002d0239002d0239002d0473001a04000032040000320400003204000032
0400003204730046047300460473004604730046040000b1033300b40400
006d040000490400ffe402cd00640400ffd80400fea305fa006e05fa006e
0800fffd02aa019202aa00b904640032078dff8d05c7005505b400350464
001e04640032046400320400ffed049cff8003f4004f05b4002b06960064
04640033023100000221008c026600b00625002805c700260400001f0400
0009031d002804d90049046400540400ffff0464003204e5001a04000053
0400000e080000af0556ff8c0556ff8c05c7006d078d007f05c7002e0400
fff10800ffec040000f2040000f202aa012302aa01260464003203f4002f
038dff4004e300be0156fe870400002102aa007802aa00390473fe910473
fe900400fff40200009b02aa001c0400ffc4080000340556ff8c0556ffb8
0556ff8c0556ffb80556ffb8031dffb8031dffb8031dffb8031dffb805c7
006d05c7006d05c7006d05c700c005c700c005c700c00239002d02aa0097
02aa00b602aa00a802aa010f02aa018b02aa015002aa000b02aa011f02aa
ffff02aa00df04e3ffc8023900000473ffd3031dffff04e3ffc8031dffeb
01c3009f05c7ffbe0400003404e300be038dff4004e3ffc10400ff0604d9
0048048f009a0266007b026600650266006f06000079060000790600006d
0400ff7405c7008e0400ff96031dffb80473ffd3031dffff05560086038d
003605560086038d0036040000290400010102ab01ef0556ff8c04000028
0556ff8c0400002805c7ffb605fd002905c7ffbe0556ffb8038d002d0556
ffb8038d002d04e3ffbe0239001e04e3ffc8042b002104e3ffbe0300001e
05c7ffbe0473001a05c7ffbe0473001a05c7006d040000320556ffbf031d
00230556ffbf031d00230473ffd3031dffff04e300a30239ff7f04e300a3
0440002905c700c00473004605c700c00473004604e3ffc8031dffeb04e3
ffc8031dffeb04d5ffbf061b007006500081046d00320419002503480011
04500042038d003404ae00390400ff4c0546007502c8000907c000240800
004f040000990800004f040000990800004f040000980400009807d5016a
05c000dc048f005004cd0099048f002604d5022204d5010505abffe904ed
01c005ab027e05abffe905ab027e05abffe905ab027e05abffe905abffe9
05abffe905abffe905abffe905ab01c005ab027e05ab01c005ab01c005ab
ffe905abffe905abffe905ab027e05ab01c005ab01c005abffe905abffe9
05abffe905ab027e05ab01c005ab01c005abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905ab02d605ab006605ab
ffea05d5ffff04d500920800000007eb013007eb012007eb013007eb0120
04d500b204d5008004d5002a082b0198086b01b807550010060000f40600
006f0440003a0540003704c0003f0415004004000025060000550695ffb8
046b004b05c0005a0240013f046b015106ab0099036b002404d5009202d6
005c02d6005c04d500b202d6004d0556ff8c0400002805560086038d0036
05560086038d00360556ffb8038d002d0556ffb8038d002d0556ffb8038d
002d05c7008e0400ff9605c7008e0400ff9605c7008e0400ff960639ffbe
047300190639ffbe04730019031dffb80239002d031dffb80239002d031d
ffb80239002d031dffb80239ffab0400fff00239feb80556ffbe0400000c
0400000c04e3ffbe0239ffb405c7ffbe0473001a0645ffbb0453001805c7
006d0400003205c7006d040000320556ffbf031dffbe0473ffd3031dffff
04e3009f0239000405c700c00473004605c700c00473004605c700c00473
004605c700c004730046071d00fc0556003904e300be038dff4002aafeb8
0556ff8c04000028078dff8d05c7002605c700550400001f02aa0107071d
00fc05560039071d00fc05560039071d00fc0556003904e300be038dff40
02aa016502aa00680400004904cd005a060000790600006e0600008c0600
00c402aa002c02aa000b02aa019202aa00460556ff8c0637004007290040
040c004005d90040060000400648003e0239fff50556ff8c0556ffcc0504
ff9e0556ffb804e3ffc80639ffbe031dffb80556ffbe0556ff7d071dffbb
05c7ffbe0546ffd105c7006d0639ffb804e3ffc304f4ff9604e300a304e3
00be0556ff84066600f605f8ffee031dffb804e300be046d003203480011
046400320239002d03eb00490419ff540354003f0387001c046400320427
00510239002d043d001b038dff930473ff82038d00390398002e04000032
041fff600391004603eb004903b8ff510558007905c9003b0239002d03eb
00490400003203eb004905c9003b0556ffb8068b009204d5ffbf0542005a
0473ffd3031dffb8031dffb80400fff00744ff8807cfffbe067d0092056d
ffb8059100cb0639ffbd0556ff8c0515ffdb0556ffcc04d5ffbf0577ff15
0556ffb80758ff800412ffcc0639ffbd0639ffbd056dffb8057dff87071d
ffbb0639ffbe05c7006d0639ffb804e3ffc30556008604e300a3059100cb
06cd00930556ff840639ffbf05fc00f60902ffbd0902ffbd061500dc07c1
ffda0512ffd9053500080873ffb30583ff7a0400002803fe004103930034
02f4ffeb03f8002e038d002d079efff7031fffd70473004604730046040e
0019041bff9e057bff9e0471001a040000320473001a0400ff06038d0036
06390014038dff4005ba00390400ffa3047300460433006306aa004a06aa
004a0437003c058d005903a800590352ffe705d70019041fff82038d002d
042f00180325ffdc0352002d031dffff023900290239002d0239feb60546
ff9d05b4001904730019040e0019038dff3f0473003d03c3ffbb02f4003f
080000410752ffad045e001c0000fefb0000ff3a0000ff380000ff380000
ff3a0000ff3a0000ff3a0000ff380000ff38000000770000ff3a000000f7
0000feb5030000a50000fff302aa003e0000037a0000003602aa00520424
ffc503bdffaf0305ff7b038300ab0419fff5027800b6029300b804180003
04200066023e00b1039400a80386ffb5038c009c03daffe10435fff90270
005f0292ff9503a600570410ff9d03e7007e03a1ffbc046800b103e5ffdd
03a1ffb403c000ae056a00bc0407ff8504f000b604b600b1047c00b101d3
0070037600700612fff7027800b6039400a80394009c0399ffd8038cffd8
0410ffbb056a00bc056a00bc056a00bc056a00bc0424ffc50424ffc50424
ffc503bdffaf0305ff7b038300ab0419fff5027800670293003504200066
023e0067039400a80386ffb5038c009c0435fff90292ff9503a6005703e7
007e03a1ffbc03e5ffdd03a1ffb403c000ae056a00bc0407ff85027800b6
03bdffaf0386ffb503a1ffbc0455fff60000ffdc0000ff250000ffdc0000
fe510400003d0800000005c7006d044b0032063300c004cb00460000fed1
0000fdb60000fda10000ff7f0000fefc0000feac0000ff350000ff080000
fe390000fe850000fe570000fe1c0000fdbf00000051000000260000fe72
041a001206000079060000650000ff000000fe320000fe620000fdab0000
feca0000fde40000fd7f0000fce50000fcac0000fd610000fd4d0000fce9
0000fc030000fbbd0000fbbd0000fc030000fb9f0000fe840000ff8c0000
fe1d0000fbbd0000fca70000fd1d0000fd990000fc4f0000fd0b0000fc93
0000fc430000fc430000fc110000fd4a0000fd0d0000fd4a0000fce50239
00290556ff8c040000280556ff8c040000280556ff8c040000280556ff8c
040000280556ff8c040000280556ff8c040000280556ff8c040000280556
ff8c040000280556ff8c040000280556ff8c040000280556ff8c04000028
0556ff8c040000280556ffb8038d002d0556ffb8038d002d0556ffb8038d
002d0556ffb8038d002d0556ffb8038d002d0556ffb8038d002d0556ffb8
038d002d0556ffb8038d002d031dffb802390029031dffb80239fffd05c7
006d0400003205c7006d0400003205c7006d0400003205c7006d04000032
05c7006d0400003205c7006d0400003205c7006d0400003205c7006d044b
003205c7006d044b003205c7006d044b003205c7006d044b003205c7006d
044b003205c700c00473004605c700c004730046063300c004cb00460633
00c004cb0046063300c004cb0046063300c004cb0046063300c004cb0046
04e300be038dff4004e300be038dff4004e300be038dff400556ff8c0400
0028031dffb80239002d05c7006d0400003205c700c00473004605c700c0
0473004605c700c00473004605c700c00473004605c700c0047300460000
00be000000be000000be000000be04d5ffbf02f4ffeb0758ff80079efff7
056dffb8040e0019056dffb8040e00190639ffbe0471001a04e300be0400
000e04e300b00400ffcd0556ff840400ffa305fc00f60433006305fcffbc
0473001905c7006c038d000205c7006d04000032023e00b10000ffd503e6
ffe6047c00360400001305b8002e0515ffdb040000130512ffd904000013
0556000f05560086038d003605c7ffbe063f002e05120003040000290419
001d0556fff1041200090556ff3005c7008e05a300bc065200190239001e
031dffb80556ffbe0400000c0239000a038dff9306c3005b05c7fe830464
003205c7006d0823006d05cc0032054e002e0400ff0604e3ffc10473ffe5
031dffef04f4ff9602ea00800239ff8b04e300a30239002704e300dd05f8
008905b200c9053a00b403bdff4004e3ffc8031dffeb0453ff5d0453ff9f
03c5ffae03c5ffcf0400000803e5004e0312ffd602f10028040afee601c3
009f02c4009f01fc0014031d00710aaaffb608e4ffb6071d002908e3ffbe
071cffbe0472001e09c7ffbe0800ffbe06ac001a038dfff60556ff8c0400
0028000000f30556ff8c04000028078dff8d05c7002605c7008e0400ff32
05c7008e0400ff960556ffbe0400000c05c7006d0400003205c7006d0400
00320453ff5d03c5ff520239feb60aaaffb608e4ffb6071d002905c7008e
0400ff9607ddffbe0585ff4505c7ffbe0473001a0556ff8c040000280556
ff8c040000280556ffb8038d002d0556ffb8038d002d031dffb80239ffa4
031dffb80239002d05c7006d0400003205c7006d040000320556ffbf031d
00080556ffbf031d002305c700c00473004605c700c0047300460473ffd3
031dffff04e300a30239ffd204b9ff6b0393ff490639ffbe0473001905f1
ffbe053e003c0451001a04e3ffc8031d00050556ff8c040000280556ffb8
038d001005c7006d04000032000000b305c7006d0400003205c7006d0400
003205c7006d0400003204e300be038dff4003bb002e0400002804000028
04000013038d0015038dffad0400002904000029038dfff404a800020348
00110348fffe0461fffe03a900320239feb60400ffac0400ffac04000032
03e2005103a700580473004604730019047300190239000a0239002d0260
ffaf023900020239001e0239ffd304c9001e063900390639003906390014
0473fea40473001a0428ffb604000032055b003205a7003205670032031d
ffe2031dffe2031dffe2031dffb5031dfff80364001a0321005403e8ffaf
03f1ffaf031dffb002a7feb802a7feb80257ffd802a7fed20239ffe40239
ffd60473001e0461001e03eb003c038d000205560003038dfff3030a0007
031d0005031d000503c5ff5203c5ffaa034bffaf034b0064034bffd703b6
ffc005c7006d03e8ffaf03a9fff60400003204a1ffaf0239fe9d0400ffe6
0360ffaf04000027034bffaf034b006405fa0029069f002905fb002904d5
002f042d0027053b00270665feb804c6001e0421001e0420005103d9ffab
024e004b024e004b017effb301af004b01af004501af0045027400260319
007b022bffff0239013f0471015102aa012302aa012602aa016502aa01cf
02aa01cf02320092023200d1048f0050048f0050048f0089048f008902aa
020702aa019202aa00f402aa00a302aaff2802aaffcb02aaffce02aa0057
02aa012902aa00f602aa00f602aa009902aa009902aa009902aaffca02aa
0000030e0105028700ae015b007301e3006e02b80064023200d103100096
0310009603100096031000960310009602aa006202aa006202aaff7e02aa
007b040000f2045700960457009604570096045700960457004304570043
045700430457004304570043031000430457002f0457002f0457002f0457
002f0457002f0310002f0457002504570025045700250457002504570025
0310002f0457001a0457001a0457001a0457001a0457001a0310001a0457
004204570042045700420457004204570042031000420457009604570096
045700960457009604570042045700420457004204570042045700420310
00420457002f0457002f0457002f0457002f0457002f0310002f0457002f
0457002f0457002f0457002f0457002f0310002f04570026045700260457
002604570026045700260310002604570042045700420457004204570042
045700420310004204570096045700960457009604570096045700420457
004204570042045700420457004203100042045700260457002604570026
045700260457002603100026045700230457002304570023045700230457
0023031000230457002f0457002f0457002f0457002f0457002f0310002f
0457004b0457004b0457004b0457004b0457004b0310004b045700960457
009604570096045700960457004204570042045700420457004204570042
031000420457001a0457001a0457001a0457001a0457001a0310001a0457
002404570024045700240457002404570024031000240457002f0457002f
0457002f0457002f0457002f0310002f0457004e0457004e0457004e0457
004e0457004e0310004e045700960457009604570096045700960000ff56
0000ff500000ff0d0000ffd7000000330000ff820000fffa0000ffc90000
ffab0000008a0000001f0000feed0000ffd70000ffd70000ffda0000ffc4
0000000a0000010e0000fe930000fe6f0000fe810000fe810000ff7a0000
00a90000feea0000fe810000fe810000fe810000fdd10000fe8e0000ffdf
0000fe160000fe7e0000fe850000fe3a0000ff1b0000ff3b0000fdfa0000
fe2c0000fe2a0000fdb90000fe5e0000fdff0000fe0c0000fded0000fcfe
0000fe1c0000ff010000fec20000fe040000fedd0000fe380000feea0000
fdfa0000fead0000fe1c0000ffe5000000650000fef40000ffbe0000002a
0000ff9c0000ffc40000fef20000fee40000ff5c0000fd110000fec00000
fe810000ff9c0000ffd50000ff9c0000fdff0000fe810000fd1f0000003c
000000460000fe3b0000ff5b0000ff680000ffcd0000ff460000ff420000
ff6f0000ff570000ff220000fe940000ff7a0000ffd40000ff7a0000fefa
02aa019202aaff6302aa002e0419003d0438001a05cc00d506ba000005cc
00d504a10032060d00200487000305c7006d04000000055600a0039b0036
0556000003b5ff7904220026039c001205b40094042d00a106c3ffd90639
ffaf05ac00c10473003d05fcff4d03b4ff9904b8000c04b8000c05930001
0488004f0628005d043f003203a4fffc0314000c04870003045ffffb038d
00360239feb605c7006d037100320371ff970556ffb80639ffbd038d002d
047300460921006d0490005005120028055600120804ffbe0564ffaf0559
ff8c0484ff5c085bffbe06e6ffaf0758ff620572ff620a8cffbe07deffaf
0412ff56031fff2d066600c70558006f05c7006d04000032063500f30448
0039063500f30448003908e4006d0715003206a7001104bd000a0972006d
067400320000fe150921006d0490005005560086038d0028037ffff20000
ff780000ffac0000003c0000003c0000fc2b0000fc4c0639ffbd04730046
0512ffd903a8005904e3ffc30400ff0605f2ffbf040cffdc0412ffcc031f
ffd1056dffb8040e0019069100dc0499003c07f6ffbe0508001a0908ffb8
061c001a05c8006a03fc003005560086038d002104e300a1063900140639
ffbf0473004605fc00f60433006306fc00480473ffe306fc00480473ffe3
031dffb80758ff80079efff7056dffb8040e0018057dff87041bff9e0639
ffbe0471ffad0639ffbe0471001a05fc00f604330063071dffbb057bff9e
02aa00c20556ff8c040000280556ff8c04000028078dff8d05c700260556
ffb8038d002d05c7006c038d00020758ff80079efff70412ffcc031fffd7
0453ffcc03c5ff520639ffbd047300460639ffbd0473004605c7006d0400
003205c7006d04000032053500080352ffe7059100cb038dff40059100cb
038dff40059100cb038dff4005fc00f60433006307c1ffda058d005904e3
002c04000029065f002c05fe0029063a0102057b006e04550102031f006e
071fff8705fcff9e07ddffbe05e1001a05c7008e0400003205b500dd07a9
00140000fe2a000000030000002400000073000000000000fe3e00000063
0000ffb80000ff730000ff840000fe4f000000110000010e0000ffb70000
ff35000000020000000d0000fe6a0000fe8a0000fe400000fde00000fe79
00000063000000240000fe550000005a0000002d0000ff380000fec00000
006500000042000000a3000000a3000000b3000000b30000012f0000010c
000000a30556ff8c040000280556ffcc040000130556ffcc040000130556
ffcc0400001305560086038d003605c7ffb60400002905c7ffb604000029
05c7ffb60400000405c7ffb60400002905c7ffb60400ffd50556ffb8038d
002d0556ffb8038d002d0556ffb8038dff850556ffb8038dffd80556ffb8
038d00100556000002aafeb805c7008e0400ff960639ffbe047300190639
ffbe047300190639ffbe047300190639ffbe0473ff930639ffbe04730019
031dff9c0239ff60031dffb80239002d0556ffbe0400000c0556ffbe0400
000c0556ffbe0400000c04e3ffbe0239ffc604e3ffbe0239ffc604e3ffbe
0239ff1e04e3ffbe0239fed1071dffbb06390014071dffbb06390014071d
ffbb0639001405c7ffbe0473001a05c7ffbe0473001a05c7ffbe04730004
05c7ffbe0473fff305c7006d0400003205c7006d0400003205c7006d0400
003205c7006d0400003204e3ffc30400ff0604e3ffc30400ff060556ffbf
031d00230556ffbf031dffc60556ffbf031dffc60556ffbf031dff140473
ffd3031dffff0473ffd3031dffff0473ffd3031dffff0473ffd3031dffff
0473ffd3031dffff04e300a30239002704e300a30239ffc604e300540239
ff3c04e300390239fedb05c700c00473004605c700c00473002805c7009d
0473fffd05c700c00473004605c700c004730046055600f3038d00390556
007a038d0034071d00fc05560039071d00fc055600390556ff840400ffa3
0556ff840400ffa304e300be038dff4004e3ffc8031dffeb04e3ffc8031d
ff7604e3ffc8031dff8c047300040239002705560039038dff4004000028
02aafeb8046d0032046d0032046d0032046d0032046d0032046d0032046d
0032046d00320556ff8c0556ff8c05bafff005bafff00556ff8c0556ff8c
0556ff8c0556ff8c03480011034800110348001103480011034800110348
0011061e005e061e008007ae006807ae00af07ae006807ae00af04640032
046400320464003204640032046400320464003204640032046400320701
005e07010086084c0068084c00af084c0068084c00af084c00e3084c00e3
0239002d0239002d023900040239002d0239002d0239002d0239002d0239
002d03e5005e03e5008005750068057500af05750068057500af057500e3
057500e3040000320400003204000032040000320400003204000032068f
00c2068f00eb081f0068081f00af07570068075700af03eb004903eb0049
03eb004903eb004903eb004903eb004903eb004903eb0049060f00eb073b
00af073b00af073b00e305c9003b05c9003b05c9003b05c9003b05c9003b
05c9003b05c9003b05c9003b06c000b606c000b608500068085000af0788
0068078800af078800e3078800e3046d0032046d00320348001103480011
04640032046400320239002d0239002d040000320400003203eb004903eb
004905c9003b05c9003b046d0032046d0032046d0032046d0032046d0032
046d0032046d0032046d00320556ff8c0556ff8c05bafff005bafff00556
ff8c0556ff8c0556ff8c0556ff8c04640010046400100464001004640010
046400100464001004640010046400100701005e07010086084c0068084c
00af084c0068084c00af084c00e3084c00e305c9003b05c9003b05c9003b
05c9003b05c9003b05c9003b05c9003b05c9003b06c000b606c000b60850
0068085000af07880068078800af078800e3078800e3046d0032046d0032
046d0032046d0032046d0032046d0032046d00320556ff8c0556ff8c0556
ff8c0556ff8c0556ff8c02aa018a02aa002e02aa018a02aa00b602aa00b9
046400100464001004640010046400320464001006820090068200660765
0090076500660639ffbe02aa00cc02aa00cc02aa01470239002d0239002d
0239fff60239fff60239002d0239002d031dffb8031dffb80449009004ad
00ca02aa011302aa011302aa014703eb004903eb004903eb004903eb0049
041fff60041fff6003eb004903eb004904e300be04e300be05ab009005ab
006605ab008702aa004602aa004602aa00f405c9003b05c9003b05c9003b
05c9003b05c9003b075700f4068f00ca078800f406c000b605f8ffee02aa
019202aa01b304e2007105560086055600860639001405c7ffbe08f6ffbf
071d00590556ffbe04e300a3095bff9e0400ffad04c10066000000460000
00460000003c000000460239000a0239feb60400ff6404e3ffc304000029
0239ff3a0473001a0239ffc50473ff990473ff9902aaffe902aaffea02aa
002402aa003402aaffd002aa006302aaffbb02aa000302aaff6402aa00d4
02aa019f02aa019102aa000a02aaffef032effa6032effa402aaffb00000
0033000000500000ffd70000fea60000feed0000fee70000fe1a00000050
00000046000000460000fe0a04e3ffc10400ff06034bff5a04b0ff4305c7
000a03e6ffdc03b80032044bffdc044bffdc03d8ffdc031fffd70239ffe6
030cffb10409ffdc0352ffdc054affdc052effdc04000032039effe203f7
001e03f7001e03f7001e05c700000385000a040000430400003203bfffdc
03f1ffaf03e80075031d00140387002703d400080530001e03e6001e0359
004f04ba004f02cbff69031ffff7033600060466ffa60325ffdc0356ff63
04e0ffdc03bfffdc04320046041bff9e03550026049b00200303002b0303
002b035f00330318002103180040035d00a3036f000f01c4002502680045
034c002e02eb002904490039038c004303a60031037600a3034700a302eb
002b0355002c02e400b1038b00e0047201060265006c026500690265006c
038d006c025100540268006c0236006c0236006c0226006c0226006c0249
000f015b003d023a0028039d0055026800550258006c022a006c0258006c
0258006c026affc5018100790263005c028a006f038200550213007802c1
001d025bffd601ff007c0261006c02b0006c024cffee015bffcc01caffcc
0263ffcc0213ffe5025bff4f01ffffe6028cffb602b0ffd5024cff670550
ffc504af00ab0545fff504b2ffb504b8009c0506ffe104ec00ae0533ff85
048fffff0000ff3a0000ff380000ff380400fff104000124047100ef0400
000008000000040000000800000002ab0000020000000155000004000000
02000000019a000000ab00000000000005560086071dffbb054aff5f05e0
004605db002905e100270556ff8c055600860400006d04e3ffbe04e3ffa9
031dffff031dffeb04120013000001cf0000feb60000fe140000003c0000
ffcb041fff0c0556002c055600860556002c04d5ffbf02f4ffeb0000fe54
000000770000fee40292ffaf0000ff38040000130400002902aafeb80639
ffc80473ffd40400fefa031dffc50364ffc1031dffff0239ffc2031dffeb
0400ff73030600550419ffd1063fff630260ffaf0239000a0400ff060387
ffe40461ffe40400001304000029039efeb804c9ff960400000c0239ffab
063900140473001a0400ff06031dff52031dffff0378feb8038d00390400
ffa3031d0005040000280400002804000029038d002d034800110348ff86
038d000202390029038dffa302a7fec70473004603c5ff56026500690207
006c0207002b0249006c0226006c0183ff880183ffac022e001e024e0078
015d0070015d0081015d0033015d0036015dff97015d005e015d003e01fe
003d036c0056036c007a024eff6e024e0055025700270258006c032f006c
01e1002a0183ffa0018300310263005d0286006c0263009f0263009b0213
006101f0005c024e0097024e0097024e000b025800790000feed0000fef9
0000fee10000ffac02aa00520265ffd60236ffe50258ffd702b8ffb80236
ffd705c7008e0556ff8c0473ffe50556008602aaffb9046d0032046d0032
046d0032046d0032046d0032046d0032046d0032046d00320239001c0239
001c0239001c0239001c0239002d0239002d0239002d0239002d03eb0049
03eb004903eb004903eb004903eb004903eb004903eb004903eb00490239
002d0239002d0239002d0239002d03eb004903eb004903eb004903eb0049
03ba00750556ffcc05c700600556ff7d0556ffb8038d002d0400fff00239
feb60647006d040000270556ffbf031d000304e300b0038dff40038d0001
038d0036038d00010239001e04d5ffbf02f4ffeb0556ff840400ffa30556
ff840400ffa30412000903370012057dff87041bff9e0000ffbe0000ffb5
0000ffdc0000ff950000ff540000ff330000fe92000000330000fe1a070a
002603d8ffdc038d000104e3ffbe0239fff504e3ffbe04e3ffc30556003e
040000280239ff7e0639ffbe047300190556ffbe0400000c04e3ffc8031d
ffeb038dfffa056affbe03a2001a04ae00390000006a000000a600000027
0000000a0000ffa70000fe6e023900290645ffbb05c7ffbe064500670000
fec10000fef00000fed40000fedf0000fecc0000fed60000fea30000feeb
0000fee20000fea30000fe8305c7006d04000027071d00fc0556003905f0
ffb80000ff700658006d04480039078100fc0634003902aa007f02ff0055
023900ec02390138040000990400009902aa014e02aa014a02aa00be02aa
ff6204e3009a0400005803dc004702c7ffca037dffd30364ffb003a7ffc7
038affe803f3004e03a3006203cc003a03da0003040000710323ffc703cf
ffe703b3fffb0400003403c0002e0400007b03a400b80400004c04000057
0239002904c9feb806bafeb806bafeb8044efe910695feb80439ffb90408
ffd3044c006204aaffbb03c3ffbb038dffbb04a6006204f4ffd3025effb9
035c00040483ffc703baffc40585ffbb0485ffc404fc005c0412ffc504fc
005c046affc503aa000003b8005c048b0087043b00b6062300c10431ffb7
0431008d0452ffcf0587ffb10606005c03baffc404fc00250412ffcb04aa
ffbb0484ffa30439ffb90439ffb90439ffb90439ffb90439ffb90439ffb9
044c006203c3ffbb03c3ffbb03c3ffbb03c3ffbb025effb9025effb9025e
ffb9025effb90485ffc404fc005c04fc005c04fc005c04fc005c04fc005c
048b0087048b0087048b0087048b00870431008d0439ffb90439ffb90439
ffb9044c0062044c0062044c0062044c006204aaffbb04aaffbb03c3ffbb
03c3ffbb03c3ffbb03c3ffbb03c3ffbb03c3ffbb04a6006204a6006204a6
006204f4ffd304a6006204f4ffd3025effb9025effb9025effb9025eff91
025effb90562ffb9035c00040483ffc703baffc403baffc403baffc403ba
ffc40485ffc40485ffc40485ffc404d1ffd304fc005c04fc005c04fc005c
046affc5046affc5046affc503aa000003aa000003aa000003aa000003aa
000003b8003503b8003a03b8005c03b8005c048b0087048b0087048b0087
048b0087048b0087048b0087062300c1062300c1062300c1062300c10431
008d0431008d0431008d0452ffcf0452ffcf0452ffcf0439ffb90587ffb1
04fc00250439ffb90408ffd3038dffbb038fffab03c3ffbb0452ffcf04f4
ffd304fc005c025effb90483ffc7043bffb50585ffbb0485ffc403e9ffdc
04fc005c04f4ffd30412ffc503e1ffcf03b8005c0431008d055c00530431
ffb7050000bb04d9ffdb0439ffb903c3ffbb04f4ffd3025effb904fc005c
04d9ffdb0431008d025effb90431008d03c3ffbb04fe0049038dffbb0456
006203aa0000025effb9025effb9035c00040618ffc50627ffd304e10049
0473ffc70450006e04e1ffd30439ffb90412ffc80408ffd3038dffbb0464
ff4803c3ffbb061fff980366ffd304dfffd304dfffd30473ffc70499ffc5
0585ffbb04f4ffd304fc005c04f4ffd30412ffc5044c006203b8005c0450
006e055c00530431ffb704e3ffd3047100a506d1ffd306d1ffd304a6005c
063effc80412ffc80448002506f9ffd30481ff8a0377ffbb02ba00aa02ba
00d902ba009502ba00a002ba00b502ba00bf02ba00b402ba010602ba00cb
02ba005a02bafff602ba002502baffe102baffec02bafff702ba000b02ba
000002ba005c02ba001702baffa604bf00310820ffba0820ffba0820ffba
0820ffba0820ffba0820ffba0820ffba06dc003205c9008805560086076a
003206fc003206fc003206fc003206fc003206fc0032063f003205e2008e
07c6ff9504bd003204bd003204bd003204bd003204bd0032050500280705
003204f1ffce04f1ffce0a53ffba08f0ffba08f0ffba0639006d0639006d
0639006d0639006d0639006d0639006d06390059063900590683003205db
006d0753003204aaffda04aaffda0587002806de003206de003206de0032
06de003206de00320608003207e0003206a9ffba055a00a0055a00a0055a
00a0053affc8053affc8079600400820ffba0820ffba0820ffba05c90088
05c9008805c9008805c90088076a003206fc003206fc003206fc003206fc
003206fc003205e2008e05e2008e05e2008e05e2008e07c6ff9507c6ff95
04bd003204bd003204bd003204bd003204bd0032050500280705003204f1
ffce04f1ffce0523ffce04f1ffce08f0ffba08f0ffba08f0ffba0639006d
0639006d0639006d07530032075300320753003204aaffda04aaffda0473
ffd30473ffd30587002805870028058700280587002806de003206de0032
06de003206de003206de003206de003207e0003207e0003207e0003207e0
0032055a00a0055a00a0053affc8053affc807050032083800a308f00028
049effbe0375003204ed009b042d00ac06390058052e004205a6ffbe0400
00a20400000d0473ffa307f1ff8705d9ff9e06dbffc30572ff0607b3ff7a
058dff820556ffbe043d001b0805ff8705a4ff9e08c3ffbe05f8001a0639
ffb80473001a05fcffbc0473001902aafeb802aafeb8041900250763ffb8
0441001e0488006d03d600320535ffdc03a9fee7071dffbb055600fa0658
002d0488002d031dffd50400003203d8000d017efee7035900c60473ffd3
04e3ffc80239ffab0400ff9605dd00c705a5ffaa060c00be0616004f0587
00c705bd0027050fffb60590ffa90721ffa9062b005c055effb60480ffb6
07d6ffb605d500ac0588010e04adffce05a500550616004f05c1003106b6
00c805860071060400e50587008d05a6ffa9058600d70692004605ad001a
067cffa905a600c705fd0056051e00530571ffa9056e0067047dffb60728
00ae065fffaf062a00b107520080019900da01fe00d8019e008101620068
01a80097026c0057047501d9063d003f044cff20042e0022047c001a0422
0034040d002203abfffd047dff9d0596ff20041e002d0478ff16024aff9e
0661ff1604190032042b002f0467000f044300190465001a043c0018047d
0043023afea90466003102ffff250481001a022eff13063e004403a3ff8a
0477001a047b003e0460004306410042047dff2003f7ffc0031d001a0641
0042044cff1f0429003405a5001804d800330239005202f400bf077a0045
077a00450616005108e300430888004308de004308c600430ac700430000
fee40305ff7b038300ab0419fff50407ff85000000770000ffc80400ff88
0400fff00639feea0471fea10a9bff150894002e05fcff99042cff35057d
ff87041bff9e052a001f05dfffac0482feb80543ffff02aa000d02aa000d
02cd00ad02aa00af055500af0200009b0800000008000000080000000800
00000800000008000000080000000ab700340240011f046b0151047100b4
027fffa00800017e07a7ff8907a70106027fffa00782004e02aaffff02aa
ffc502aaff1d073800b505f100b50639007103a300620400006404000096
04000075040000570266000107a7ff89040000b80400002e048f002707a7
ff810400008604000036061800ef040000340493009602a1005206d10036
051d00be02a1005201c70000000000000800000008000000080000000800
000008000000080000000800000008000000080000000800000008000000
08000000080000000800000005cc0024026600b1015d00810266006a0266
008c026600bd026600e602660094026600bd0266009f0266009f0266009f
0199003e0199ff75026600180266fff00266ffdd0266ffe80266fff30266
000402660025026600530266000902660025026600080266000802660008
019900000199ff3402abffce0266ffce0155ffd203bcffcc02abffd80266
ff2a01deffbe0155ffde06da009906c0009905c70083085800b405b70049
07670099046600650535002e07e700b40414ff7e073fffcb07e700530639
005d04730019047300190581ffac046d003405aafffe066c001e05c7004f
05fa006e05ec003004e3006606390082076a002c065c006905c7005805c7
00260556ffbf0799003209920093055600f30556003503c5ff5206680073
05b50014027b00420556ffbe0556ff8c076a0072052b00740314fff204ec
003a0581ffea055e000808ecffef033fffff052f008c04840030039c0029
0492004b029d004807dd00a009ba003a0462004103be00350517005b0639
005b05d6005d063900a404e3006604e300660556fffe05c7ffb604000029
038d002d023900290239feb6059d006606aa008b071200360ab9ff9c0600
00790600007907b8007906000079060000650600006f0600006a06000079
0600008c03ac0079031dffb805faffb808d7ffb8084fffb8055600f30874
00f30a5300f30ac700ca0880ffb80556ff8408a1ff840a3bff8404e3ffbe
0556008605c7ffb6071dffbb02390029044600290653002905c20029038d
003905c7003907d4003909e10039063c00290400ffa3063bffa30848ffa3
0239001e038d003604000029063900140858007805c7ffb608580078053c
001e059200860587005c060dffb6090b0078060000b102aa011402aa0114
02aa011402aa00de02aa011402aa00de037500de037500de035c00a2035c
00a2035c00dc035f00c2035f00c2035f00c206b500320000fc000000fc00
0000fbff0200ffa9046400610556008705560087048f0050040000220400
006402aa000d048f0027035f0028035f0028048f0027048f002702aaffc5
02aaffe102aa00c202aa00e002aaffc502aaff1d05f4002105f4ffce0461
00670461ff1904930096049300960493009604dc00340400013402aa01af
02d600710200009b020000070200005b0200fffc02aa0052040000b10400
00e00400ffec040000710800ffed0800ffed020000000239ffca0239ffa4
0556008602aaffdd0200ffe50400001404000090040000910225ffd901c4
0052022500fd01c401200639ffbe04730019067e00a3050c00270412000a
0412ff9203a0004203a0ffca048b0042048bffca038dffbb03aa000008bc
ff8c05f50003089bff8c05f50003082eff8c061700030749ff8c05900003
0749ff8c059000030749ff8c0590000305560065038dfffa0556ffbe0400
000c0556ffbe0400000c0556ffbe0400000c060f00ea032600ab04e3ffbe
0239001e05c7ffe60400ffc20672006d04630032097d006d0647003204e3
ffc30400ff060583001104faff4306d700d6067b006505c7006d04000027
0660006d04c00027056500be03f2006d04bc000803e9ffd30556004c038d
ff73071d00fc05560039043f002c0403001104e3ffc10400ff0604e3ffc1
0400ff060497ff140374ff2a038300190383ffa1049affc6049aff4c0400
00570400ffdf027d006b055b0029037900220765001405a7001a03640023
0595ffc505e0002703d9ffae05c7006d040000340435ff3f031dffb60416
0031040cffd7040cff5f04e300e00239001e0630ff3f0473ffa60435ff3f
031dffb605200086035000360639011d03ea007305c7ffbe0473001a0556
0008038dffde038d00360473001905ec000e053dffc60556ff3002aafeb8
064e0050045e003205fa005004290032064e0050046b003205c7ffec0400
ff960556ffbe0400ffa705c7ffbe0473ffc70556ffbf031dffd60473ffd3
031dffff06b100360412ffcc06580037057b00560556ffe604e3ffbd0400
00190594ff470556ff4d0419ff54079b006b05c9003b0574ffe403c70037
03c9006c063900500556011404e3009f071dffbb031dff39091aff8c0477
ffd00598001303780020038dffc604b0000002aafeb80400ffd50322003c
029e000102790050062800140443001a0427001903faffea03faffea0400
00320601003205c7002405c7002406470032064700320441ffe20489ffc5
02ea0023042b00230392ffdd0520ffdd0395002f04fd002f02a7feb80473
00450473001e0639003c063900280473000c03b8ff5103b2ff1103b2fece
0400ffa30400fe8a0400fe8a0400fe7d038dff4002aa00830292004b01f1
008801f100a1029f0056058d003b059fffaf05af003606700046044f0047
04d9ffdb0556ffcc04e3ffd700>
<000000000000007600000076000000760000007600000076000000760000
007600000076000000760000007600000076000000760000007600000076
00000076000000f8000000f8000000f8000000f8000000f8000000f80000
00f8000000f8000000f8000000f8000000f8000000f8000000f8000000f8
000000f8000000f8000000f8000000f8000000f8000000f8000000f80000
00f8000000f8000000f8000000f8000000f8000000f8000000f8000000f8
000000f8000000f8000000f8000000f8000000f8000000f8000001e40000
01e4000001e4000001e4000001e400000374000003740000037400000374
000003740000037400000374000003740000037400000374000003740000
037400000374000003740000037400000484000006740000067400000674
000006740000067400000674000006740000067400000674000009280000
0b0800000b0800000b0800000b0800000b0800000b0800000cd200000ee8
00000ee800000ee8000010b6000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000100000dfa00f2003c0091000600020010002f00560000
04a50209000400020000000e00ae0000000300000000021a000000000003
000000070076021a0001000000000000010d029000010000000000030023
039d0001000000000004002303c00001000000000006002303e300010000
00000007003b04060003000104090000021e04410003000104090001002c
065f0003000104090002000e068b00030001040900030046069900030001
04090004004606df00030001040900060046072500030001040900070076
076b00a90020003200300031003700200054006800650020004d006f006e
006f007400790070006500200043006f00720070006f0072006100740069
006f006e002e00200041006c006c00200052006900670068007400730020
00520065007300650072007600650064002e0020000d000d004800650062
0072006500770020004f00700065006e00540079007000650020004c0061
0079006f007500740020006c006f00670069006300200063006f00700079
00720069006700680074002000a900200032003000300033002000260020
0032003000300037002c002000520061006c00700068002000480061006e
0063006f0063006b002000260020004a006f0068006e0020004800750064
0073006f006e002e002000540068006900730020006c00610079006f0075
00740020006c006f00670069006300200066006f00720020004200690062
006c006900630061006c0020004800650062007200650077002000690073
0020006f00700065006e00200073006f007500720063006500200073006f
00660074007700610072006500200075006e006400650072002000740068
00650020004d004900540020004c006900630065006e00730065003b0020
00730065006500200065006d0062006500640064006500640020006c0069
00630065006e007300650020006400650073006300720069007000740069
006f006e00200066006f0072002000640065007400610069006c0073002e
00540069006d006500730020004e0065007700200052006f006d0061006e
00200069007300200061002000740072006100640065006d00610072006b
0020006f006600200054006800650020004d006f006e006f007400790070
006500200043006f00720070006f0072006100740069006f006e002ea920
3230313720546865204d6f6e6f7479706520436f72706f726174696f6e2e
20416c6c205269676874732052657365727665642e200d0d486562726577
204f70656e54797065204c61796f7574206c6f67696320636f7079726967
687420a92032303033202620323030372c2052616c70682048616e636f63
6b2026204a6f686e20487564736f6e2e2054686973206c61796f7574206c
6f67696320666f72204269626c6963616c20486562726577206973206f70
656e20736f7572636520736f66747761726520756e64657220746865204d
4954204c6963656e73653b2073656520656d626564646564206c6963656e
7365206465736372697074696f6e20666f722064657461696c732e424146
4d4b4b2b54696d65734e6577526f6d616e50532d426f6c644974616c6963
4d544241464d4b4b2b54696d65734e6577526f6d616e50532d426f6c6449
74616c69634d544241464d4b4b2b54696d65734e6577526f6d616e50532d
426f6c644974616c69634d5454696d6573204e657720526f6d616e206973
20612074726164656d61726b206f6620546865204d6f6e6f747970652043
6f72706f726174696f6e2e00a90020003200300031003700200054006800
650020004d006f006e006f007400790070006500200043006f0072007000
6f0072006100740069006f006e002e00200041006c006c00200052006900
67006800740073002000520065007300650072007600650064002e002000
0d000a000d000a0048006500620072006500770020004f00700065006e00
540079007000650020004c00610079006f007500740020006c006f006700
69006300200063006f0070007900720069006700680074002000a9002000
320030003000330020002600200032003000300037002c00200052006100
6c00700068002000480061006e0063006f0063006b002000260020004a00
6f0068006e00200048007500640073006f006e002e002000540068006900
730020006c00610079006f007500740020006c006f006700690063002000
66006f00720020004200690062006c006900630061006c00200048006500
620072006500770020006900730020006f00700065006e00200073006f00
7500720063006500200073006f0066007400770061007200650020007500
6e00640065007200200074006800650020004d004900540020004c006900
630065006e00730065003b002000730065006500200065006d0062006500
640064006500640020006c006900630065006e0073006500200064006500
73006300720069007000740069006f006e00200066006f00720020006400
65007400610069006c0073002e004200410046004d004b004b002b005400
69006d00650073004e006500770052006f006d0061006e00500053005200
6500670075006c00610072004200410046004d004b004b002b0054006900
6d00650073004e006500770052006f006d0061006e00500053002d004200
6f006c0064004900740061006c00690063004d0054004200410046004d00
4b004b002b00540069006d00650073004e006500770052006f006d006100
6e00500053002d0042006f006c0064004900740061006c00690063004d00
54004200410046004d004b004b002b00540069006d00650073004e006500
770052006f006d0061006e00500053002d0042006f006c00640049007400
61006c00690063004d005400540069006d006500730020004e0065007700
200052006f006d0061006e00200069007300200061002000740072006100
640065006d00610072006b0020006f006600200054006800650020004d00
6f006e006f007400790070006500200043006f00720070006f0072006100
740069006f006e002e00410c005403d302c9001d001f03d303d303d203d1
003c001f03d1b2061d1fb903ca03c9b2351f00411503c2003003c2004003
c200a003c200b003c20005008003c0009f03c000af03c000cf03c00004ff
c003c0b345453240b803c0b32b2e3240b803c0b2282932b9ffc003c0b21a
2632bd03c002c80027001fffc003beb2161b32b9ffc003bdb2424232b9ff
c003bdb2363832b9ffc003bdb32a2d32df410a03bd00ef03bd000203bd03
be0028001fffc003beb3282e32f0b803beb5019006900702b9ff8002c8b2
313340b802c8b31c333210411b02c8006002c8007002c80003000f02c800
af02c8000200b002c800e002c80002005f02c800a002c80002002f02c800
3f02c8004f02c840a8030100000340cd383b32404d383b32a41fb41fc01f
d01fe41f05501f641f741f841f04041f141f241f341f441f05e41ff41f02
ab1fbb1fcb1f03cfcddbcd028bcd9bcdafcdbfcd04cdcdcd4ddb4d028b4d
9b4dad4dbd4d044d4d377f047f05027f027f03020f0301cf03df03ef03ff
03048f039f03af03bf03044f035f036f037f03049f02af02bf02cf02049f
03af03bf03cf03045f036f037f038f03041f032f033f034f03047f411e03
660001006f03660001005f03660001004f03660001003f03660001002f03
660001001f03660001000f0366000100ff0366000100ef036600010366b2
21370f412402dd0001005f02dd009f02dd00df02dd0003002f02dd003f02
dd006f02dd0003009f02c900df02c90002000f02c9001f02c9003f02c900
5f02c9000402dd02dd02c902c902c802c840140100010100090102000800
17170000001211084041110286019e003f000d013d003f000d0116003f00
0d026f0083000d02170083000d0174b7830df3830d76830d410d02350024
000d02180024000d02030024000d01610024000d01134017240da6240d95
240d82240d6f240d5b240d46240d22240d410d0249001e000d020e001e00
0d01c1001e000d01a3001e000d0178401d1e0df61e0df11e0de21e0ddd1e
0dce1e0d751e0d701e0d651e0d521e0dbb02140037000d01a0400b370dfb
370d2d370d1d370db80215b40f440f0009bb02150044000d023cb24d1d1f
b8023ab24d1f1fb80237b24d2a1fbc0232004d0201001f022eb21f931f41
09022c001f0125001f022b001f0156001f022ab21f931f410d0228014000
79001f021f016d0156001f021e00330401001f021db233e41fb8021bb233
411fb80216b2212d1fb801c3b24d1e1fb801bfb24d931fb801beb24dcd1f
bc01bb004d0201001f01b7b21f671f410d01b601400089001f01b2003604
01001f01b10036019a001f01b0b236bb1fb801afb236ab1f410901ad016d
0067001f01ac016d0072001f01a6b2212c1fb801a5b221351fb801a4b221
3b1fb801a2b2215e1fbc01a100350201001f017bb24d931fbc0179004d04
01001f0176b24dcd1f41150175001f0125001f01730140006c001f017000
36019a001f016f00360125001f016b00330401001f0169b233811f410901
6600210125001f0163003b0125001f0147b24d221f410d0143001f010100
1f013b003302ab001f013a00330101001f0139b233341fb80136b2212e1f
bc013300210401001f0132b23bab1fbc011f01400081001f0119b2212d1f
b80117b221471fb80111b235cd1fb80108b24d791fb80106b21fab1fb801
05b236721fb80100b721471ff51fe41ff4b90140080140131fef332c1fee
212e1fed214c1fe04dcd1fdf4db80101b21fdc1fb80125b51fdb1fcd1fda
b901400801b61fd936891fd621b80156b21fd53bb80156b21fcd4db80156
b21fcc4dbb0101001f00ca0140b29e1fc9b9016d0156b21fc733b8080140
0b1fc2333b1fc133381fbe21b80125b21fbb3bbb0801001f00b3016db29e
1fa7b80140b76c1fa321cd1fa235b8019a400f1fa13bab1f99215e1f8c35
e41f841fb80401b61f8121381f7f21b80125b61f7b334c1f7935b8019ab6
1f714d271f6e3bb80101400f1f664d4a1f6321891f6033521f5a3bbb019a
001f0058016db2721f57b9016d0801b51f55212e1f4fb80140b76c1f4c36
9e1f4b35b80401b21f493bb80201400b1f483bcd1f45212a1f433bb80125
40161f424d521f414dcd1f4033891f39366c1f2e21301f2cb80140b2791f
2bb901400401b61f2833e41f2735b8019ab21f5537bc0257000701d60007
0187402e07de07a8079e0756073e07340730072907260725072007140812
0810080e080c080a080808060804080208000814b8ffe0402c0000010014
061000000100060400000100041000000100100200000100020000000100
0002010802004a009fbd028600af028600bf02860003b013034b024b5342
b0372b4bb807ff52b0382b4bb007505b58b101018e59014bb0c063004b62
20b0f65323b8010a515ab005234201b0124b004b544218b0382bb00288b8
01005458b801ffb101018e851bb0124358b900010139858d1bb90001013c
858d595901b0372b730016763f183f123e113946443e113946443e113946
443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b18
2b2b2b2b2b2b2b2b2b2b2b2b2b2b182b1db0964b5358b0aa1d59b0324b53
58b0ff1d594bb02753205c58b9028802864544b90287028645445958b901
240288455258b9028801244459594bb03053205c58b9016d02884544b902
88028845445958b90162016d455258b9016d01624459594bb04353205c58
b9001f02874544b9004d028745445958b9025e001f455258b9001f025e44
59594bb8012553205c58b9003602884544b9003a028845445958b9089700
36455258b9003608974459594bb8040153205c58b90140003a4544b13a3a
45445958b91ee00140455258b901401ee04459594bb00c53205c58b13b3b
4544b1333b45445958b1123b455258b13b124459594bb03153205c58b13b
3b4544b1213b45445958b1503b455258b13b504459594bb03953205c58b1
3b3b4544b1353b45445958b15d3b455258b13b5d4459592b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b45695342014b5058b108004259435c58b1080042591610703eb0
124358b911a63d851bba011b03d9000b2b59b00a2342b00b2342003f3f18
2b103c012f4bb00d5458b90001ffb038594bb00c5458b90001ffb0385906
0cb0062342b0072342b0124358b93b21187e1bba040001a8000b2b59b00c
2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342b0
0f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b0112342
00184569444569441845694473737373742b454474747575757575757575
00757575757474747573732b45186944747445186944747474747575752b
2b0000454445447373737475002b2b73752b2b732b2b2b2b2b2b2b2b2b75
732b002b2b4569442b2b000000>
[4673 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 3816 91 <0001ffa3ffe40411039f00400110b9003affe840720d113f3d244b274f38
97009c269d3aaa26a938bc26bc38c926ca3a0c16003700021b2734243c27
3c3748154b244d264d395c26582758385c39583a89268938983a993cba16
c73ac83bd9171507151615023a263a38262b150314152627150303153a26
0401223c3a33260f150301080b0011ba0300000e0104400c08080140d300
007e01071d1dbf0118001901a700220030010400340300400e2a2a220b3f
2d7f2d022dc8402a00b8036a40140b1dd31e7e0b40120b3f200b400b700b
030b1a42b801fcb13d182b4e10f65d012b4df4ed10fdf4e471003f3c10ed
ed10fd7ae8182f3f7af0182fed103c10eded011112173900111217398708
2e2b087d10c4313001715d00715d012b1325161736373636333216151406
232226232207060712171633323736371706070623222626270e02232226
35343633321716333237363736370227262322075d015d5f276232435731
373b3b2c2053102a26344c55331e1f1a131d3c245854403e4055422d7585
5832343d42331b2232161d171e2e1c4b603622341b2703633c95b3913a4e
2f3c33303d171e2986fed442270d1554158e3a2d39818e95892a3c303342
10180c0f321f650164462d08>VBAAAA+TimesNewRomanPS-BoldItalicMT AddT42Char 
2 0 0 <0002011c0000051c050000030007004db10201bb010f000600070272b200
0504b8010fb403000a0704b8010fb5010019080605bf010f000200030144
00090120012b00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd
3c31302111211125211121011c0400fc2003c0fc400500fb002004c0>VBAAAA+TimesNewRomanPS-BoldItalicMT AddT42Char 
VBAAAA+TimesNewRomanPS-BoldItalicMT /CharStrings get begin
/x 91 def
end
VBAAAA+TimesNewRomanPS-BoldItalicMT /Encoding get
dup 120 /x put
pop
end
%ADOEndSubsetFont
/ISRTZH+TimesNewRomanPS-BoldItalicMT /VBAAAA+TimesNewRomanPS-BoldItalicMT findfont ct_VMDictPut
/ISRTZH+TimesNewRomanPS-BoldItalicMT*1 
[120{/.notdef}rp /x 135{/.notdef}rp]
ISRTZH+TimesNewRomanPS-BoldItalicMT nf
ISRTZH+TimesNewRomanPS-BoldItalicMT*1 [18 0 0 -18 0 0 ]msf
482.567 370.188 mo
(x)sh
4 lw
[] 0 dsh
22.228 170.719 mo
503.185 425.842 li
.884 .769 0 0 cmyk
@
227.974 293.053 mo
219.199 288.258 li
223.994 279.483 li
232.769 284.278 li
227.974 293.053 li
.438 .359 .363 .013 cmyk
f
2 lw
227.974 293.053 mo
219.199 288.258 li
223.994 279.483 li
232.769 284.278 li
227.974 293.053 li
cp
.884 .769 0 0 cmyk
@
4 lw
185.352 376.446 mo
247.894 257.613 li
.75 .68 .67 .902 cmyk
@
233.706 283.28 mo
185.981 375.546 li
.518 0 .125 0 cmyk
f
233.706 283.28 mo
185.981 375.546 li
.884 .769 0 0 cmyk
@
238.728 282.78 mo
238.728 285.542 236.49 287.78 233.728 287.78 cv
230.966 287.78 228.728 285.542 228.728 282.78 cv
228.728 280.018 230.966 277.78 233.728 277.78 cv
236.49 277.78 238.728 280.018 238.728 282.78 cv
f
3 lw
238.728 282.78 mo
238.728 285.542 236.49 287.78 233.728 287.78 cv
230.966 287.78 228.728 285.542 228.728 282.78 cv
228.728 280.018 230.966 277.78 233.728 277.78 cv
236.49 277.78 238.728 280.018 238.728 282.78 cv
cp
@
190.478 376.53 mo
190.478 379.292 188.24 381.53 185.478 381.53 cv
182.716 381.53 180.478 379.292 180.478 376.53 cv
180.478 373.768 182.716 371.53 185.478 371.53 cv
188.24 371.53 190.478 373.768 190.478 376.53 cv
.75 .68 .67 .902 cmyk
f
190.478 376.53 mo
190.478 379.292 188.24 381.53 185.478 381.53 cv
182.716 381.53 180.478 379.292 180.478 376.53 cv
180.478 373.768 182.716 371.53 185.478 371.53 cv
188.24 371.53 190.478 373.768 190.478 376.53 cv
cp
@
2 lw
318.228 393.947 mo
318.228 393.947 330.561 392.614 329.061 376.447 cv
0 .994 1 0 cmyk
@
441.811 376.03 mo
441.811 376.03 445.561 384.613 436.228 389.28 cv
.884 .769 0 0 cmyk
@
.75 .68 .67 .902 cmyk
%ADOBeginSubsetFont: VBAAAA+TimesNewRomanPS-BoldItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ISRTZH+TimesNewRomanPS-BoldItalicMT gcheck setglobal} if

2 0 3 <> ISRTZH+TimesNewRomanPS-BoldItalicMT AddT42Char 
2 1652 80 <00010014fff505cb039f005001c840ad123e457a0f02592d572e593c5546
ef52050f52df520200241024262426253718363737484718462446384645
474858155d4e5d4f770c783c873987448f5295089514973b9a3c9052a408
a90ca614a92da93cb719fa3cf84621454646000c010047241d1a23270a0c
37093a01004624d3042301c423d4230223a4151a1a362a2f142f40140c3f
2a2a2f093a3a2b3b3e143e40140c3f3b3b3e0046462b474a144a40140c3f
47474a4ed34f7e5033bb030000120041030040291206500600074746463b
3b3a0a28233f2340239023a023b0230523a7270b2a51282f2a3e3b4a4710
52b80349400b1aa7042a01c02ad42a022ab8032a40093aa7043b01c03b01
3bb8032a401646a7474f2a4eeb4ab24719512a173b1747172a510a64b903
4900182b2b103c2b2b2b4e10f44df4f4e410edf45d71edf45d71fdfc2b10
3c103c103c2b10c0003f7ae95d182f2b3f3c103c103c3f003c3c103ced10
ed10f4ed87052e012b2b7d10c4872e012b182b0e7d10c4870e2e012b182b
0e7d10c40118f65d71ed111239111239392b11123900393911123939870e
7d10c43130015d7172005d01435c58400d2d0a11393d1e11394a14103947
b8ffecb2103918b8ffd8b20f113e2b2b2b2b2b5901033637363633321615
140707363736373633321615140703061514163332373637363717060623
222635343713363534262322070e03070723133635342623220706070323
133635342626233725022080813b577139413a1b2d823958412d3335471e
6f190d080b08242809122245a5463d4a1971170e070d0d134f94391c3dfd
bb0f0d0725507a6451ffbc1c1024330a0155039ffe52c645653e4e2f315f
a1c84266241a47394066fe8b5318080e071d380c19168178432d2b570186
5114070d060a54d97a61ce028d3514070c6196d3fee102835f2810170d26
3b00>ISRTZH+TimesNewRomanPS-BoldItalicMT AddT42Char 
ISRTZH+TimesNewRomanPS-BoldItalicMT /CharStrings get begin
/space 3 def
/m 80 def
end
ISRTZH+TimesNewRomanPS-BoldItalicMT /Encoding get
dup 32 /space put
dup 109 /m put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ISRTZH+TimesNewRomanPS-BoldItalicMT*1 
[32{/.notdef}rp /space 76{/.notdef}rp /m 10{/.notdef}rp /x 135{/.notdef}rp]
ISRTZH+TimesNewRomanPS-BoldItalicMT nf
ISRTZH+TimesNewRomanPS-BoldItalicMT*1 [12 0 0 -12 0 0 ]msf
425.135 447.94 mo
(  m)sh
4 lw
1 lj
10 ml
502.448 583 mo
21.008 583 li
21.008 101.56 li
502.448 101.56 li
cp
@
500.895 376.28 mo
21.228 376.28 li
f
2 lw
0 lj
4 ml
500.895 376.28 mo
21.228 376.28 li
@
%ADOBeginSubsetFont: SBAAAA+Symbol Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /SBAAAA+Symbol def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (Symbol) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 83 /Sigma put
def
/FontBBox {-180 -293 1090 1010} def
end
systemdict begin
dup /Private
9 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-17 0 673 685 487 500] def
/StdHW [92] def
/StdVW [95] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/Sigma <1C60D8A8C9B7CB351A4FAE5C9380C4F163CA1E0785DAD66B7765F88D
FED564DB816782B391C708D2F8FB07FF3A5760D1F33D108BC57029C621988A0F
FA24C5F4BD979B3E1E237A8F7B8054EF2A49438C> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ISRTZI+Symbol /SBAAAA+Symbol findfont ct_VMDictPut
/ISRTZI+Symbol*1 
[83{/.notdef}rp /Sigma 172{/.notdef}rp]
ISRTZI+Symbol nf
ISRTZI+Symbol*1 [18 0 0 -18 0 0 ]msf
249.224 250.893 mo
(S)sh
%ADOBeginSubsetFont: VBAAAA+TimesNewRomanPS-BoldItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ISRTZH+TimesNewRomanPS-BoldItalicMT gcheck setglobal} if
2 118 15 <0001ffc6feb701680131001200414010b202b00302c5120101ac00b7800d
010db8038ab5002f20010101b80165400b0a050510410a5f135eab182b10
f6ed392f10f45de4003f5dfded3130015d00710327363736353426272635
3436333216151406231799251d67110d61454363bffeb72a572d2323275f
211927415e6a4f7df200>ISRTZH+TimesNewRomanPS-BoldItalicMT AddT42Char 
2 884 70 <00010036ffe4037c039f00280096401a550c01010005181e131a16101313
0d050000a705601e430d0726b801384011050b00d301400b0d3401eb4f16
01163a10b8ffc0b328143f10b8ffc040100b0d349f10af10bf1003101a2a
232c09b8ffc0400e28143fbf09c00902091929236a182b4e10f45d012b4d
ed4e10f65d2b012b4ded5df42bed003fed3fed1a7a10e9182f1112392f01
111239001112391112393130015d25170607062322262635341224333216
1514062322263534373635342726232207060215141633323603011e615e
7d865a8b42b201248d717256352e3d36250f1420544a62686a494095f11b
7436484d8b49a4013db9644a435e3c2936281c15120b10445afeec7c6275
4200>ISRTZH+TimesNewRomanPS-BoldItalicMT AddT42Char 
2 2344 81 <0001001afff40407039f0034013e4097123d297904025820532a5036030b
200b2c30367036042518370c470c46295c325c3367089608992ca608aa2c
b70ee0360d0418141802292a2a002d2c2b2b2e0e171a0a01290129002a18
d317a4090e0e361d22142240140c3f1d1d222a0000362e2b142e40140c3f
2e2e2b253306060032d3337e343400072b2a0a173f1740179017a0170417
a71a0b1d3528221d2e2b100ea7c41d011db8032a40122b332a32eb2eb22b
19351d172b171d350a64b9034900182b2b103c2b2b4e10f44df4f4e410f4
5ded2b103c103c2b10c0003f7ae95d182f3f3c3f3c10f4ed103c10ed8705
2e012b2b7d10c4870e2e18012b2b0e7d10c40118f6ed111239390039392b
111239870e7d10c4c4870e10c43130015d5d7172005d01435c58b9000cff
e2b30f113e1fb8ffec400f0f113e211e11392d1e10392c1e0f392b2b2b2b
2b5901033637363633321615140703061514163332373637363717062322
2635343713363534262322070603032313363534262623372502237c7d3e
5b843a344a1880100f080a0b232409142693a23e46187d0d120c26368a81
52ffbb1b1024320b0151039ffe53bc4564484d3e3850fe5538110a10081d
350e1c17f740302a5301ab2a140b113484fefbfed702825f2811170d263b
>ISRTZH+TimesNewRomanPS-BoldItalicMT AddT42Char 
2 2824 87 <00010027ffe4027e0493001d0167b90005ffe2b2133905b8ffe240870f39
291a361a0220022003220e200f2210241c241d3002300337104002400344
0f43104f194f1a421d570058185b195b1a571d6600650265036f196f1a60
1c661d740274037b197b1a7f1f84028403850f8b198b1a9002900397059a
1aaa03af19b602b603c600c403c61dd300d31de302e3033601040707000f
0a0e121b001a19181d00151919b80118400f186003500f010fd340930ea0
0e020eb80340401e07600700002b1815141840140c3f1818153f0e400e90
0ea00e040ea71219ba016800030168b2011d00b80142401001120b010615
1e2818151004c807a715b8ffc0b3121e3f15b8ffe0b336373415b8ffe040
0f1e313415ba1e091517151e0a2368182b2b103c2b2b10f62b2b012b01fd
e42b103c2b10c0003f3f10f43c10eded10ed5d87052e012b2b0e7d10c401
1a1810fe5d1afd5d321a7a10e8182f111239111239123900111239398705
7d10c4c43130015d005d012b2b0103330723030615141633323736371706
06232226353437132337363637024b50832381a710120b11122e3d2345a6
50444b1a9e881480b07c0493fef073fdbc361c0d130e235716787045353a
5b021d4a2f7e8c00>ISRTZH+TimesNewRomanPS-BoldItalicMT AddT42Char 
2 4278 92 <0001ff40fe46038a039f003800e040352218012a092b183a093a18391a39
2e4d1846275a085a18691865277918803ab03a0f090f152d290718012538
d300eb12010725a729b801a7401f1f0f19070b150f2728222d0102030405
060631302f2e040732401501152c0fb8ffc04016140c3f3f0f500f023f0f
8f0f900fa00fb00fc00f060fb80340b4074f220122b802f640192d2a3200
38a407a70f32af320230326f3270328032a0320532b8016eb339236a182b
10f65d71edf63c10f4e45d10f65d71012bed5d1112173917391112393911
12391239003feded3f3cf4ed111239391239011112393130015d005d1325
161716171613363736353426263534363332161514060702070606070623
22263534363332171633323736373635342703262726232207340134250f
1b0b15086b8a2a6118493437514b8ab1aa6d86482b2a395149313d332216
17161e3606081109241c2d111503455a2e29477df6fee98de8463e274627
1f324a543943b1d7feedc9807121135037374c402b0d103a7d40569c017d
692e2203>ISRTZH+TimesNewRomanPS-BoldItalicMT AddT42Char 
ISRTZH+TimesNewRomanPS-BoldItalicMT /CharStrings get begin
/comma 15 def
/c 70 def
/n 81 def
/t 87 def
/y 92 def
end
ISRTZH+TimesNewRomanPS-BoldItalicMT /Encoding get
dup 44 /comma put
dup 99 /c put
dup 110 /n put
dup 116 /t put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ISRTZH+TimesNewRomanPS-BoldItalicMT*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma 54{/.notdef}rp /c 9{/.notdef}rp /m 
/n 5{/.notdef}rp /t 3{/.notdef}rp /x /y 134{/.notdef}rp]
ISRTZH+TimesNewRomanPS-BoldItalicMT nf
ISRTZH+TimesNewRomanPS-BoldItalicMT*1 [12 0 0 -12 0 0 ]msf
259.373 254.307 mo
(t,n)
[3.33719 3.00122 0 ]xsh
ISRTZI+Symbol*1 [18 0 0 -18 0 0 ]msf
262.865 395.386 mo
(S)sh
ISRTZH+TimesNewRomanPS-BoldItalicMT*1 [12 0 0 -12 0 0 ]msf
273.013 398.8 mo
(x,n)sh
ISRTZI+Symbol*1 [18 0 0 -18 0 0 ]msf
191.781 516.219 mo
(S)sh
ISRTZH+TimesNewRomanPS-BoldItalicMT*1 [12 0 0 -12 0 0 ]msf
202.097 520.967 mo
(y,n)
[5.32921 3.00119 0 ]xsh
ISRTZH+TimesNewRomanPS-BoldItalicMT*1 [18 0 0 -18 0 0 ]msf
390.308 442.021 mo
(y )
[7.99561 0 ]xsh
%ADOBeginSubsetFont: HBAAAA+TimesNewRomanPS-BoldMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (HBAAAA+TimesNewRomanPS-BoldMT)
%%Title: (HBAAAA+TimesNewRomanPS-BoldMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /HBAAAA+TimesNewRomanPS-BoldMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-558 -328 2000 1056} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 31 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 4 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
11 <001C60D8A8C9B81F2C3AB57AB194F4783E7EF4F7F496E46883007B2A2548
4D7BF68B081B28F5DB84B2C80700F68B2197F4D5CDE8072954A020DE0D3E3CB2
07940EF85417B418A5B02AD6D1C3844667EA2970DE7A684C392F5B21> |
30 <001C60D8A8C9B81F2C3ABBA03E0BB43567AF7E4A2474E45AFC0B713A8CDD
9AAD00817B00FFDCD13A4105F1BCB1223578DAACAEAF9A78AD506EDA9F1AAE62
DD573BD5AAD85DD45FE8411BA81F3EFE827A7FAB13185AAF9F07E5B45B20BA05
BD220E90F47F6F9C776F5B4CA4C066AE5EDADEEAFB8BAC3BECC1CF0772F0F075
EB6BA795598A34E95FBCC86657D53C7E2A50207225EAD305267C06B742CD3513
E65A562DDC50ED28C153B4E79CC44FEA8FD7A77F> |
12 <001C60D8A8C9B81F2C3ADC97069E12CE0DE37CDD25CB66FAD03CBE544A23
1EDF24E1BA640B8D926E8D777032E3B9409EC63880C3259694808B94C1D41F80
5DA76250378D90AB113EE8D71F0E2FC8ACB9947680B1A1D4CA4C7E> |
0 <001C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB
222483BD74F8B> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /HBAAAA+TimesNewRomanPS-BoldMT-Identity-H /Identity-H 0 [/HBAAAA+TimesNewRomanPS-BoldMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/ISRTZJ+TimesNewRomanPS-BoldMT /HBAAAA+TimesNewRomanPS-BoldMT-Identity-H findfont ct_VMDictPut
ISRTZJ+TimesNewRomanPS-BoldMT [18 0 0 -18 0 0 ]msf
402.807 442.021 mo
(\000\013)sh
ISRTZH+TimesNewRomanPS-BoldItalicMT*1 [18 0 0 -18 0 0 ]msf
408.801 442.021 mo
(x)sh
ISRTZJ+TimesNewRomanPS-BoldMT [18 0 0 -18 0 0 ]msf
417.801 442.021 mo
(\000\036)sh
%ADOBeginSubsetFont: KBAAAA+SymbolMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (KBAAAA+SymbolMT)
%%Title: (KBAAAA+SymbolMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /KBAAAA+SymbolMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {0 -220 1113 1005} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 46 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
45 <001C60D8A8C9B66A6BA5E34BB7159DF210B37D462FAC3C0170EC8512E688
7D2BB8F21A4E9ABDDF720D45CBED1F5756DC849F91AA193C77FE396253DC1A7C
3DC9A8FFBFA09BAA458813B19AA0AAAB5F1E6B6B6CA13DD5327B05B86581A612
AB3B1A30B42D861D9C0595EA76AFF5881EB21887D21DE835F1A4A1348C5FD374
109C848F26EFF70C6523A40A87377B887727D97AAD2DC71FF6791B060EC7E762
B7668F882C0734E83CB9EBE6CF0753C1D4704F629EF79BB83F2D1083D92A5313
CE8E41888B03BE7462EBD5A39AC9F2DF6D19C795D53FFD68CEB41EDB71DCB1E3
DE7B9A8B84C63FDA704084FBCD3C642E9E5255A61E4CD6F792B5F550AD7525FC
544D51B37169FBEAEB6111D0DEEB92D986B5EC6EC69629C40F3A0D617B27D3C4
C0FDCAB3E39E0CCDEF10FF8DF9219BA8753A7C08D47556F6080C> |
0 <001C60D8A8C9B7C3C9ED920C533BFCEF627DC3963E487931C80D1235BDD70
699E096A6312D> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /KBAAAA+SymbolMT-Identity-H /Identity-H 0 [/KBAAAA+SymbolMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/ISRTZK+SymbolMT /KBAAAA+SymbolMT-Identity-H findfont ct_VMDictPut
ISRTZK+SymbolMT [18 0 0 -18 0 0 ]msf
423.795 442.021 mo
(\000-)sh
ISRTZH+TimesNewRomanPS-BoldItalicMT*1 [18 0 0 -18 0 0 ]msf
435.153 442.021 mo
( )sh
ISRTZJ+TimesNewRomanPS-BoldMT [18 0 0 -18 0 0 ]msf
439.653 442.021 mo
(\000\014)sh
ISRTZH+TimesNewRomanPS-BoldItalicMT*1 [12 0 0 -12 0 0 ]msf
394.469 448.686 mo
(c)sh
ISRTZH+TimesNewRomanPS-BoldItalicMT*1 [18 0 0 -18 0 0 ]msf
194.895 118.28 mo
(y)sh
.884 .769 0 0 cmyk
%ADOBeginSubsetFont: PBAAAA+TimesNewRoman,BoldItalic-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (PBAAAA+TimesNewRoman,BoldItalic)
%%Title: (PBAAAA+TimesNewRoman,BoldItalic Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /PBAAAA+TimesNewRoman,BoldItalic def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-547 -307 1401 1032} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 3578 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6FF86FBD75DB9092FB01BBE833F55BB0B9375D47E84581C0
C7E888E7865A7> |
89 <001C60D8A8C9B77FE2CEC7A69EECAC1233E1817FB9E2249A7E3F5D4D3C37
DEEEB93A6B6C708F82C92FBE1DCF955F666DE0B7F1BE312E4B0472158D04405A
8000D9612BE5260C70DDC4EB9365B339DEF99EDB1D4642B83DE2F6FB03B0672C
6D26DDF134ABCE7F3CBEFA35BCDBB518C2C6BBDAFA3E82E00549E0E6DD6113FB
F899485729AFBADF64E72D3ADF9D86F55868C207911AA67120B5BD516918E01F
9DBE5640951F6EF3> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /PBAAAA+TimesNewRoman,BoldItalic-Identity-H /Identity-H 0 [/PBAAAA+TimesNewRoman,BoldItalic] ct_ComposeFont pop end end
%ADOEndSubsetFont
/ISRTZL+TimesNewRoman,BoldItalic /PBAAAA+TimesNewRoman,BoldItalic-Identity-H findfont ct_VMDictPut
ISRTZL+TimesNewRoman,BoldItalic [18 0 0 -18 0 0 ]msf
214.562 343.056 mo
(\000Y)sh
ISRTZH+TimesNewRomanPS-BoldItalicMT*1 [12 0 0 -12 0 0 ]msf
222.551 346.47 mo
(n)sh
.75 .68 .67 .902 cmyk
%ADOBeginSubsetFont: VBAAAA+TimesNewRomanPS-BoldItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ISRTZH+TimesNewRomanPS-BoldItalicMT gcheck setglobal} if
2 248 50 <0002006dffe005bf056c00100021007b400b1d2a0a0c341c2a0a0c3415b8
fff0b30b0c3414b8ffcc40190a0c34580a58146802780d871e0511350803
1a350009174d04b8ffc0400f14213f4004010419221f4d400c010cb8ffc0
b31a1b340cb8ffc040091718340c1a237a6c182b4e10f62b2b714de94e10
f471012b4de9003fed3fed3130015d2b2b2b2b0522262635341200333216
16151400070613220e020215141633323736123534260240a4ca65fe01af
d27bdd7bfebec998af4f6f787c6d6a536e4d99c1672086e86ede01c3010f
7cde71fdfe037255053a3986f9fe548f7a7d49910231db897b00>ISRTZH+TimesNewRomanPS-BoldItalicMT AddT42Char 
ISRTZH+TimesNewRomanPS-BoldItalicMT /CharStrings get begin
/O 50 def
end
ISRTZH+TimesNewRomanPS-BoldItalicMT /Encoding get
dup 79 /O put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ISRTZH+TimesNewRomanPS-BoldItalicMT*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma 34{/.notdef}rp /O 19{/.notdef}rp /c 
9{/.notdef}rp /m /n 5{/.notdef}rp /t 3{/.notdef}rp /x /y 
134{/.notdef}rp]
ISRTZH+TimesNewRomanPS-BoldItalicMT nf
ISRTZH+TimesNewRomanPS-BoldItalicMT*1 [18 0 0 -18 0 0 ]msf
168.567 395.505 mo
(O)sh
.884 .769 0 0 cmyk
%ADOBeginSubsetFont: VBAAAA+TimesNewRomanPS-BoldItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ISRTZH+TimesNewRomanPS-BoldItalicMT gcheck setglobal} if
2 484 55 <000100a30000058b054c001901334039120b083a023f063a083a15490849
155709670b670f770a740e870ba7010e1014111d100f090e1d0f0809091f
1415141540140c3f1414150219b802384042000815be0002100f08141a28
151410034702ae123f01c001d001ff0104200130015f018001bf01057f01
9f01ef01030100ae18471940371c3f601901801990190219b8ffc0b41a1d
341909ba022c00140234b61a091417141a0ab8011ab19b182b2b103c2b2b
10f601ed2f2b7172012bedf42f5d717201435c58400f0140140c3f014012
0b3f0140371c3f2b2b2b59f4ed2b103c2b10c0003f3c3ffd3c10fc3c870e
2e012b2b057d10c4180010ed0110c00010ed0110c03130015d01435c58b9
0008fff2b30b123f14b8ffe8b30d113f14b8ffe840150c103f0b180b0f3f
08361039153610390f140f103e2b2b2b2b2b2b2b59012103233635342627
0106151416170721373236370106060723014804436724027a91fed2193e
5f09fd5f0c675e27012e9cd25727054cfe931d16687308fc035529262d02
25254d8603fd057e9300>ISRTZH+TimesNewRomanPS-BoldItalicMT AddT42Char 
ISRTZH+TimesNewRomanPS-BoldItalicMT /CharStrings get begin
/T 55 def
end
ISRTZH+TimesNewRomanPS-BoldItalicMT /Encoding get
dup 84 /T put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ISRTZH+TimesNewRomanPS-BoldItalicMT*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma 34{/.notdef}rp /O 4{/.notdef}rp /T 
14{/.notdef}rp /c 9{/.notdef}rp /m /n 5{/.notdef}rp /t 3{/.notdef}rp 
/x /y 134{/.notdef}rp]
ISRTZH+TimesNewRomanPS-BoldItalicMT nf
ISRTZH+TimesNewRomanPS-BoldItalicMT*1 [18 0 0 -18 0 0 ]msf
244.059 283.509 mo
(T)sh
82.41 190.548 mo
114.386 207.087 li
f
3 lw
82.41 190.548 mo
114.386 207.087 li
@
117.421 200.225 mo
118.075 207.809 li
111.507 212.659 li
111.47 212.64 li
117.384 201.206 li
117.421 200.225 li
f
1 lw
117.421 200.225 mo
118.075 207.809 li
111.507 212.659 li
111.47 212.64 li
117.384 201.206 li
117.421 200.225 li
cp
@
%ADOBeginSubsetFont: VBAAAA+TimesNewRomanPS-BoldItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ISRTZH+TimesNewRomanPS-BoldItalicMT gcheck setglobal} if
2 3282 88 <00010046ffe40424039f003301784086124217015401590c022201240e23
18222b390b34354701470e5a0a5a206a0a6a207b0a7b2099009b0a960ea9
00aa0aa60ea927ba1cb72bd60ed410e90be40f1b3035010b0a00181d0a10
1804181310171a030c0720001a0a201e1f0b040c1d18d317a410322a315f
316f3102317e2b0d1010361d0c140c40140c3f1d1d0c0300002b2b28142b
b8fff1401e160d3f2b18140c3f2b2b28173f179017a0170317a71a31d332
7e3333000cb803b140170d00070d0607c825251a0b281d34280c1d2b2810
10a71db8032a401003a728ba341d1728171d28340a23e8182b2b103c3c2b
2b10f6edf4ed2b103c103c2b10c0c0003f3c10ed3f3f10e4103c10f4ed7a
10e95d182f87052e012b2b2b0e7d10c4870e2e012b182b057d10c4017a10
f85d182fe410f6ed111217392b1112391112391112390039393130015d71
5d72005d01435c58b52018160d3f22b8ffe2b313143e10b8ffe2b2133901
b8ffecb30f103e2ab8ffe2b30f103e0eb8ffe2b20f113e2b2b2b2b2b2b59
010306151417163332373637133703061514163332373637170623222635
343737060706062322263534371336353426262337250220c20e07080b2e
4d6e795bfdc0180f080e0d243b228ba73e471931823b5a7b38354d19711c
1025320a0155039ffd582f120905085277df013209fd6c540c08110c1d58
18fb3f333653a9bd4263424e3c3356019062220f170d263b>ISRTZH+TimesNewRomanPS-BoldItalicMT AddT42Char 
ISRTZH+TimesNewRomanPS-BoldItalicMT /CharStrings get begin
/u 88 def
end
ISRTZH+TimesNewRomanPS-BoldItalicMT /Encoding get
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ISRTZH+TimesNewRomanPS-BoldItalicMT*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma 34{/.notdef}rp /O 4{/.notdef}rp /T 
14{/.notdef}rp /c 9{/.notdef}rp /m /n 5{/.notdef}rp /t /u 
2{/.notdef}rp /x /y 134{/.notdef}rp]
ISRTZH+TimesNewRomanPS-BoldItalicMT nf
ISRTZH+TimesNewRomanPS-BoldItalicMT*1 [15.9876 8.2692 8.2692 -15.9876 0 0 ]msf
94.4461 188.807 mo
(u)sh
ISRTZH+TimesNewRomanPS-BoldItalicMT*1 [10.6584 5.5128 5.5128 -10.6584 0 0 ]msf
103.335 193.405 mo
(n)sh
0 .993988 1 0 cmyk
%ADOBeginSubsetFont: SBAAAA+Symbol AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ISRTZI+Symbol dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/theta <1C60D8A8C9B7B202261308638810755CF3F0C4DA841AECC7303459D3
6B0BB918C4A63A628808C7FA9F16FF98F1B75F58B497DBBF4516B1236EDFF47A
D71D871AA7D0171B755FD592904E8111170370A658B029103E44D5264434FA53
03762BAAF85DDDBEF0564BC8902818F319C4ED8FBB92F7CA47130287C4B7453B
7CD80A98527E965EC54F72B5FBC52D20C3264FCC5F832D2FCD2D23EB2E868F4D
83F9959286DF3E6570CEC41046D4FA8EB665C84A76740AB21AC58B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ISRTZI+Symbol /Encoding get
dup 32 /theta put
pop
%ADOEndSubsetFont
/ISRTZI+Symbol*1 
[32{/.notdef}rp /theta 50{/.notdef}rp /Sigma 172{/.notdef}rp]
ISRTZI+Symbol nf
ISRTZI+Symbol*1 [18 0 0 -18 0 0 ]msf
333.593 392.922 mo
( )sh
%ADOBeginSubsetFont: XBAAAA+TimesNewRomanPS-BoldItalicMT Initial
ct_T42Dict begin
-0.547 -0.305 1.398 1.031
 256 array 0 1 255 {1 index exch /.notdef put} for  /XBAAAA+TimesNewRomanPS-BoldItalicMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32f932b9c7000000cc000000606376
74200b9ce43b0000012c000007a86670676d4a5f6448000008d400000634
676c796630773df10000921c0000124068656164e7a3997c00000f080000
0036686865610e56116400000f4000000024686d7478f24f665700000f64
000037e86c6f636100f9bdc20000474c000037ec6d617870134c03bf0000
7f38000000206e616d65825bb80800007f580000088f70726570d3359107
000087e800000a32676469720000000000000000000000000003034c02bc
00050008059a0533002c0125059a0533004c03a000660212010502020703
060505090304e0000eff4000785b0000000100000000544d432000210020
fffc056bfe460133072101bb400001bfdff700000383054c000000200008
058e0000054c001f054c001c0394001b0000ffe10000ffe40000ffe8fe4a
fffc056b0023fe6affe00313000000fc000000fc00000000000000000025
00f30120005f005500ea0032007400cf0055004b00af013f000900f50108
00260080001701540002001600b800d3005000f00023ffbe00dd00f70035
ffe9001102b6004900a901490158002e003b008601080023003f0039003a
004e00e3013f003d010a000900710108feff004c0082009c00c700d80015
003a006d035105d800280028009f05b800500064001500da015b017cffc2
ffd8fff40099ffff001d002d00d9011c01740446004e007200be00dd09b5
0038004b006d009d0118001b003c005c0069007a00a800c60122fff2000d
008600e3022b055200300047009100f4040104c9ffafffc1ffd5002c003b
003b003e004b006b009900a500b801c002210343ff8c0041004b005f009a
00a600be010a01dc031e0390ff6700250031005d006e00b600c000d000d3
010a015001bc0274027b02d7000900360048004c005c006f008400930095
00a600a800ac00b000b700bc00c00104013601370145019403b6fd81fe3f
00070019003a003b005b00b800c500e100f801160127012c013401470149
015d01bc03ed04740532053eff00ff970008000f005c006d007000820089
008b00a700c100f600f80129017aff72ff88000000000025003e0059006d
007100720081008100bc00dd00de011401150150019c01d6027e0404041c
ff7b002000390046004c004d005a0068006c00720080008300a300ce00d1
00e200ed0107011f0126013f016a01e0035e03a303a703cc05d805f0fed8
ff78ffaeffe1ffe7001900240041005500580071008200860088009000b0
00bb00c200c400d000ed00f700f801150118011f012c015e017c019801a2
01cc01d201fa022b026d02cf02cf02df0333039103e304ab04fc04fe0588
05e706bffed1ff4a000000010003000400170024003c004d0056005c0067
007700a800b000b800c300c600c800e900eb00f500f8010a010c01270135
01350139013f0149014d0197019801c701ee023d02500258026d026f0294
02b30300031a032a0361039603a104330440047904da04e804fb057b058c
05ab0761fe60fe99ff00ff13ff2fff47ffed00180031003f004c006b0074
0078007c00840094009700b000b600b700d800da00e200e400e500eb00ee
00ef00f600fa0106010c011101110114013b013e01450149014d015b0164
016f0184019101b301b901d101e101e501ef0205020602220236023b023e
024102600276029a029a029d02c402ee03130327032b0373038c03ba03c2
03d2040f0485051505320532054905610595069906a80727074807620810
08ccfd2afddefe23fe44fe67fe96feacff24ff41ff5cff61ff9effa3ffb7
ffc2ffc5ffcaffddfff0000000000003000800100018001c0023002b0030
003e0046004b0052005e005e006e007a007b00830085008a009100920098
00a800af00b600cc00ce00cf00d200e700f100f200fa01010108010b0112
012601270127012e013601370138013b013e0140015b016a017001740179
018201840188018d0192019b01a001a001a001ab01b801bc01c001cc01da
01dc01e001e0020102100214021d022902300230024302460269027a0284
029502a302b402c102c202cf02dd02e102ec02f00310033a034503880399
03ad03bd03d403d503e303ea03f304260426046e04d104e00513054b0576
05a305b705c205f8063b065b06b806e80706071a0724075007a907d407ff
082700f6012600f100df000000000000000000000000038402af02f301b8
0205017a04910491049e019f0425049e019f049e019f027a005101ac0261
0319033b021c033b01ee01880278020a01ee033b029f002400240261019e
015e017100440149028400990284009902840025004100450298020501c9
024904440188044400000000023005d30415035d01810023016e003504c9
005b059604910025026202dd01d00434030a0319031e03c1049e05e8035c
00000282ffef040d03ce0209010c01f6025303a202df02d0000a00d60082
00000032010901a201af01770204027a019e02eb019b01ec024e0326045b
03ee03c3042600b703620031004f0027ffee01240096036700d703750291
032603260041004501d7007402ff02a50216029f017a0100031c005000b7
012b016800f9003101a8013a00a801cc00f3012502020021007301c70603
021b0142010501e1012403350272018c044301e50282010f02fe01ee034a
02c50210024e022a02a501cf005f00b1026603b203580115008e015d02a5
00d1fee201b0010b015a0395005900f70783031b008b045d00a101440100
009400b4febf03c600e803ce017303e6012e0222049500390023033b01b8
000003f00140015303b401a805ee061801c6007d00cd00d1037c008500bd
00ccfc47fcb1008402a7fccb046402ba0167032b00700136000001320068
030c0155001bfe6fffc60249013102f1fe79feb4fcf2ff4203adfc0efc61
032a00c3009100a10077004c0002015e008400860023005d004b010a01b8
0086ffc500a80072008800590028009901350015003d0056007a00f801d6
00090007000f00e2001700bc016a00ed0274005b0136000000ab00800050
05a50090fe40013a004800db018b00b300480420040e022b0457008c0082
0082002203d703f1045840425554403f3e3d3c3b3a393837353433323130
2f2e2d2c2b2a292827262524232221201f1e1d1c1b1a1918171615141312
11100f0e0d0c0b0a090807060504030201002c4523466020b02660b00426
2348482d2c452346236120b02661b004262348482d2c45234660b0206120
b04660b004262348482d2c4523462361b0206020b02661b02061b0042623
48482d2c45234660b0406120b06660b004262348482d2c4523462361b040
6020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd
442320b8015a51582320b08d44235920b0ed51582320b04d44235920b090
51582320b00d44235921212d2c20204518684420b001602045b04676688a
4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b01723
70b101173e01b0172370b10217453ab10200080d2d2c45b01a234445b019
23442d2c2045b00325456164b050515845441b2121592d2cb00143632362
b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c20
69b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b0036159
2d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb01243
588745b0112bb0172344b0177ae41b038a45186920b01723448a8a8720b0
a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2cb00225
46608a46b040618c482d2c01182f2d2c20b0032545b019234445b01a2344
4565234520b00325606a20b009234223688a6a606120b01a8ab000527921
b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb114008a5279
b31940201945208a54582321b03f1b235961442d2cb110114323430b2d2c
b10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e
0f432343650b2d2cb11011432343650b2d2c4b525845441b2121592d2c01
20b003252349b04060b0206320b000525823b002253823b002256538008a
63381b212121212159012d2c4bb06451584569b00943608a103a1b212110
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b
2d2c3eb02a2a2d2c352d2c76b802df23701020b802df4520b0005058b001
61593a2f182d2c21210c6423648bb84000622d2c21b08051580c6423648b
b82000621bb200402f2b59b002602d2c21b0c051580c6423648bb8155562
1bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb4000100
000015b00826b00826b00826b008260f10161345683ab001162d2cb40001
00000015b00826b00826b00826b008260f1016134568653ab001162d2c4b
53234b515a5820458a60441b2121592d2c4b545820458a60441b2121592d
2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb013435803
1b02592d2cb0134358021b03592d2c4b54b012435c5a58381b2121592d2c
b012435c580cb00425b00425060c6423646164b807085158b00425b00425
012046b01060482046b0106048590a21211b2121592d2cb012435c580cb0
0425b00425060c6423646164b807085158b00425b00425012046b8fff060
482046b8fff06048590a21211b2121592d2c4b53234b515a58b03a2b1b21
21592d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab012435c
5a58381b2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58
381b2121592d2c462346608a8a462320468a608a61b8ff8062232010238a
b903bc03bc8a70456020b0005058b00161b8ffba8b1bb0468c59b0106068
013a2d2cb1020042b123018851b1400188535a58b910000020885458b202
010243604259b12401885158b920000040885458b2020202436042b12401
885458b2022002436042004b014b5258b2020802436042591bb940000080
885458b202040243604259b94000008063b80100885458b2020802436042
59b94000010063b80200885458b202100243604259b12601885158b94000
020063b80400885458b202400243604259b94000040063b80800885458b2
02800243604259b12801885158b94000080063b81000885458ba00020100
0002436042595959595959592d2cb0024354584b53234b515a58381b2121
591b21212121592d000100000007000024cf9cd95f0f3cf5081908000000
0000a31fbca400000000d67a920bfb9ffd8c0b3508420000000900010001
00000000000100000721fe4500570ac7fb9ffa460b350018000700000000
00000000000000000dfa0639011c000000000200000002000000031d0071
04710151040000500400004f06aa00dd0639005e0239013f02aa006702aa
ff19040000f6048f00500200ffc602aa000d0200ffe50239ff5a04000071
040000300400000804000019040000240400004e0400007b040000f10400
004c0400005702aa005202aa0001048f0050048f0050048f0050040000b5
06a8fff80556ff8c0556ffcc0556008605c7ffb60556ffb80556000005c7
008e0639ffbe031dffb80400fff00556ffbe04e3ffbe071dffbb05c7ffbe
05c7006d04e3ffc305c7006d0556ffbf0473ffd304e300a305c700c00556
00f3071d00fc0556ff8404e300be04e3ffc802aaffc5023900a002aaff1d
048f00d00400ff4c02aa00f40400002804000013038d003604000029038d
002d02aafeb80400ff9604730019023900290239feb60400000c0239001e
063900140473001a040000320400ff0604000027031d0023031dffff0239
002704730046038d0039055600390400ffa3038dff40031dffeb02c90057
01c3009f02c9ff41048f00270556ff8c0556ff8c055600860556ffb805c7
ffbe05c7006d05c700c00400002804000028040000280400002804000028
04000028038d0036038d002d038d002d038d002d038d002d0239002d0239
002d0239002d0239002d0473001a04000032040000320400003204000032
0400003204730046047300460473004604730046040000b1033300b40400
006d040000490400ffe402cd00640400ffd80400fea305fa006e05fa006e
0800fffd02aa019202aa00b904640032078dff8d05c7005505b400350464
001e04640032046400320400ffed049cff8003f4004f05b4002b06960064
04640033023100000221008c026600b00625002805c700260400001f0400
0009031d002804d90049046400540400ffff0464003204e5001a04000053
0400000e080000af0556ff8c0556ff8c05c7006d078d007f05c7002e0400
fff10800ffec040000f2040000f202aa012302aa01260464003203f4002f
038dff4004e300be0156fe870400002102aa007802aa00390473fe910473
fe900400fff40200009b02aa001c0400ffc4080000340556ff8c0556ffb8
0556ff8c0556ffb80556ffb8031dffb8031dffb8031dffb8031dffb805c7
006d05c7006d05c7006d05c700c005c700c005c700c00239002d02aa0097
02aa00b602aa00a802aa010f02aa018b02aa015002aa000b02aa011f02aa
ffff02aa00df04e3ffc8023900000473ffd3031dffff04e3ffc8031dffeb
01c3009f05c7ffbe0400003404e300be038dff4004e3ffc10400ff0604d9
0048048f009a0266007b026600650266006f06000079060000790600006d
0400ff7405c7008e0400ff96031dffb80473ffd3031dffff05560086038d
003605560086038d0036040000290400010102ab01ef0556ff8c04000028
0556ff8c0400002805c7ffb605fd002905c7ffbe0556ffb8038d002d0556
ffb8038d002d04e3ffbe0239001e04e3ffc8042b002104e3ffbe0300001e
05c7ffbe0473001a05c7ffbe0473001a05c7006d040000320556ffbf031d
00230556ffbf031d00230473ffd3031dffff04e300a30239ff7f04e300a3
0440002905c700c00473004605c700c00473004604e3ffc8031dffeb04e3
ffc8031dffeb04d5ffbf061b007006500081046d00320419002503480011
04500042038d003404ae00390400ff4c0546007502c8000907c000240800
004f040000990800004f040000990800004f040000980400009807d5016a
05c000dc048f005004cd0099048f002604d5022204d5010505abffe904ed
01c005ab027e05abffe905ab027e05abffe905ab027e05abffe905abffe9
05abffe905abffe905abffe905ab01c005ab027e05ab01c005ab01c005ab
ffe905abffe905abffe905ab027e05ab01c005ab01c005abffe905abffe9
05abffe905ab027e05ab01c005ab01c005abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905ab02d605ab006605ab
ffea05d5ffff04d500920800000007eb013007eb012007eb013007eb0120
04d500b204d5008004d5002a082b0198086b01b807550010060000f40600
006f0440003a0540003704c0003f0415004004000025060000550695ffb8
046b004b05c0005a0240013f046b015106ab0099036b002404d5009202d6
005c02d6005c04d500b202d6004d0556ff8c0400002805560086038d0036
05560086038d00360556ffb8038d002d0556ffb8038d002d0556ffb8038d
002d05c7008e0400ff9605c7008e0400ff9605c7008e0400ff960639ffbe
047300190639ffbe04730019031dffb80239002d031dffb80239002d031d
ffb80239002d031dffb80239ffab0400fff00239feb80556ffbe0400000c
0400000c04e3ffbe0239ffb405c7ffbe0473001a0645ffbb0453001805c7
006d0400003205c7006d040000320556ffbf031dffbe0473ffd3031dffff
04e3009f0239000405c700c00473004605c700c00473004605c700c00473
004605c700c004730046071d00fc0556003904e300be038dff4002aafeb8
0556ff8c04000028078dff8d05c7002605c700550400001f02aa0107071d
00fc05560039071d00fc05560039071d00fc0556003904e300be038dff40
02aa016502aa00680400004904cd005a060000790600006e0600008c0600
00c402aa002c02aa000b02aa019202aa00460556ff8c0637004007290040
040c004005d90040060000400648003e0239fff50556ff8c0556ffcc0504
ff9e0556ffb804e3ffc80639ffbe031dffb80556ffbe0556ff7d071dffbb
05c7ffbe0546ffd105c7006d0639ffb804e3ffc304f4ff9604e300a304e3
00be0556ff84066600f605f8ffee031dffb804e300be046d003203480011
046400320239002d03eb00490419ff540354003f0387001c046400320427
00510239002d043d001b038dff930473ff82038d00390398002e04000032
041fff600391004603eb004903b8ff510558007905c9003b0239002d03eb
00490400003203eb004905c9003b0556ffb8068b009204d5ffbf0542005a
0473ffd3031dffb8031dffb80400fff00744ff8807cfffbe067d0092056d
ffb8059100cb0639ffbd0556ff8c0515ffdb0556ffcc04d5ffbf0577ff15
0556ffb80758ff800412ffcc0639ffbd0639ffbd056dffb8057dff87071d
ffbb0639ffbe05c7006d0639ffb804e3ffc30556008604e300a3059100cb
06cd00930556ff840639ffbf05fc00f60902ffbd0902ffbd061500dc07c1
ffda0512ffd9053500080873ffb30583ff7a0400002803fe004103930034
02f4ffeb03f8002e038d002d079efff7031fffd70473004604730046040e
0019041bff9e057bff9e0471001a040000320473001a0400ff06038d0036
06390014038dff4005ba00390400ffa3047300460433006306aa004a06aa
004a0437003c058d005903a800590352ffe705d70019041fff82038d002d
042f00180325ffdc0352002d031dffff023900290239002d0239feb60546
ff9d05b4001904730019040e0019038dff3f0473003d03c3ffbb02f4003f
080000410752ffad045e001c0000fefb0000ff3a0000ff380000ff380000
ff3a0000ff3a0000ff3a0000ff380000ff38000000770000ff3a000000f7
0000feb5030000a50000fff302aa003e0000037a0000003602aa00520424
ffc503bdffaf0305ff7b038300ab0419fff5027800b6029300b804180003
04200066023e00b1039400a80386ffb5038c009c03daffe10435fff90270
005f0292ff9503a600570410ff9d03e7007e03a1ffbc046800b103e5ffdd
03a1ffb403c000ae056a00bc0407ff8504f000b604b600b1047c00b101d3
0070037600700612fff7027800b6039400a80394009c0399ffd8038cffd8
0410ffbb056a00bc056a00bc056a00bc056a00bc0424ffc50424ffc50424
ffc503bdffaf0305ff7b038300ab0419fff5027800670293003504200066
023e0067039400a80386ffb5038c009c0435fff90292ff9503a6005703e7
007e03a1ffbc03e5ffdd03a1ffb403c000ae056a00bc0407ff85027800b6
03bdffaf0386ffb503a1ffbc0455fff60000ffdc0000ff250000ffdc0000
fe510400003d0800000005c7006d044b0032063300c004cb00460000fed1
0000fdb60000fda10000ff7f0000fefc0000feac0000ff350000ff080000
fe390000fe850000fe570000fe1c0000fdbf00000051000000260000fe72
041a001206000079060000650000ff000000fe320000fe620000fdab0000
feca0000fde40000fd7f0000fce50000fcac0000fd610000fd4d0000fce9
0000fc030000fbbd0000fbbd0000fc030000fb9f0000fe840000ff8c0000
fe1d0000fbbd0000fca70000fd1d0000fd990000fc4f0000fd0b0000fc93
0000fc430000fc430000fc110000fd4a0000fd0d0000fd4a0000fce50239
00290556ff8c040000280556ff8c040000280556ff8c040000280556ff8c
040000280556ff8c040000280556ff8c040000280556ff8c040000280556
ff8c040000280556ff8c040000280556ff8c040000280556ff8c04000028
0556ff8c040000280556ffb8038d002d0556ffb8038d002d0556ffb8038d
002d0556ffb8038d002d0556ffb8038d002d0556ffb8038d002d0556ffb8
038d002d0556ffb8038d002d031dffb802390029031dffb80239fffd05c7
006d0400003205c7006d0400003205c7006d0400003205c7006d04000032
05c7006d0400003205c7006d0400003205c7006d0400003205c7006d044b
003205c7006d044b003205c7006d044b003205c7006d044b003205c7006d
044b003205c700c00473004605c700c004730046063300c004cb00460633
00c004cb0046063300c004cb0046063300c004cb0046063300c004cb0046
04e300be038dff4004e300be038dff4004e300be038dff400556ff8c0400
0028031dffb80239002d05c7006d0400003205c700c00473004605c700c0
0473004605c700c00473004605c700c00473004605c700c0047300460000
00be000000be000000be000000be04d5ffbf02f4ffeb0758ff80079efff7
056dffb8040e0019056dffb8040e00190639ffbe0471001a04e300be0400
000e04e300b00400ffcd0556ff840400ffa305fc00f60433006305fcffbc
0473001905c7006c038d000205c7006d04000032023e00b10000ffd503e6
ffe6047c00360400001305b8002e0515ffdb040000130512ffd904000013
0556000f05560086038d003605c7ffbe063f002e05120003040000290419
001d0556fff1041200090556ff3005c7008e05a300bc065200190239001e
031dffb80556ffbe0400000c0239000a038dff9306c3005b05c7fe830464
003205c7006d0823006d05cc0032054e002e0400ff0604e3ffc10473ffe5
031dffef04f4ff9602ea00800239ff8b04e300a30239002704e300dd05f8
008905b200c9053a00b403bdff4004e3ffc8031dffeb0453ff5d0453ff9f
03c5ffae03c5ffcf0400000803e5004e0312ffd602f10028040afee601c3
009f02c4009f01fc0014031d00710aaaffb608e4ffb6071d002908e3ffbe
071cffbe0472001e09c7ffbe0800ffbe06ac001a038dfff60556ff8c0400
0028000000f30556ff8c04000028078dff8d05c7002605c7008e0400ff32
05c7008e0400ff960556ffbe0400000c05c7006d0400003205c7006d0400
00320453ff5d03c5ff520239feb60aaaffb608e4ffb6071d002905c7008e
0400ff9607ddffbe0585ff4505c7ffbe0473001a0556ff8c040000280556
ff8c040000280556ffb8038d002d0556ffb8038d002d031dffb80239ffa4
031dffb80239002d05c7006d0400003205c7006d040000320556ffbf031d
00080556ffbf031d002305c700c00473004605c700c0047300460473ffd3
031dffff04e300a30239ffd204b9ff6b0393ff490639ffbe0473001905f1
ffbe053e003c0451001a04e3ffc8031d00050556ff8c040000280556ffb8
038d001005c7006d04000032000000b305c7006d0400003205c7006d0400
003205c7006d0400003204e300be038dff4003bb002e0400002804000028
04000013038d0015038dffad0400002904000029038dfff404a800020348
00110348fffe0461fffe03a900320239feb60400ffac0400ffac04000032
03e2005103a700580473004604730019047300190239000a0239002d0260
ffaf023900020239001e0239ffd304c9001e063900390639003906390014
0473fea40473001a0428ffb604000032055b003205a7003205670032031d
ffe2031dffe2031dffe2031dffb5031dfff80364001a0321005403e8ffaf
03f1ffaf031dffb002a7feb802a7feb80257ffd802a7fed20239ffe40239
ffd60473001e0461001e03eb003c038d000205560003038dfff3030a0007
031d0005031d000503c5ff5203c5ffaa034bffaf034b0064034bffd703b6
ffc005c7006d03e8ffaf03a9fff60400003204a1ffaf0239fe9d0400ffe6
0360ffaf04000027034bffaf034b006405fa0029069f002905fb002904d5
002f042d0027053b00270665feb804c6001e0421001e0420005103d9ffab
024e004b024e004b017effb301af004b01af004501af0045027400260319
007b022bffff0239013f0471015102aa012302aa012602aa016502aa01cf
02aa01cf02320092023200d1048f0050048f0050048f0089048f008902aa
020702aa019202aa00f402aa00a302aaff2802aaffcb02aaffce02aa0057
02aa012902aa00f602aa00f602aa009902aa009902aa009902aaffca02aa
0000030e0105028700ae015b007301e3006e02b80064023200d103100096
0310009603100096031000960310009602aa006202aa006202aaff7e02aa
007b040000f2045700960457009604570096045700960457004304570043
045700430457004304570043031000430457002f0457002f0457002f0457
002f0457002f0310002f0457002504570025045700250457002504570025
0310002f0457001a0457001a0457001a0457001a0457001a0310001a0457
004204570042045700420457004204570042031000420457009604570096
045700960457009604570042045700420457004204570042045700420310
00420457002f0457002f0457002f0457002f0457002f0310002f0457002f
0457002f0457002f0457002f0457002f0310002f04570026045700260457
002604570026045700260310002604570042045700420457004204570042
045700420310004204570096045700960457009604570096045700420457
004204570042045700420457004203100042045700260457002604570026
045700260457002603100026045700230457002304570023045700230457
0023031000230457002f0457002f0457002f0457002f0457002f0310002f
0457004b0457004b0457004b0457004b0457004b0310004b045700960457
009604570096045700960457004204570042045700420457004204570042
031000420457001a0457001a0457001a0457001a0457001a0310001a0457
002404570024045700240457002404570024031000240457002f0457002f
0457002f0457002f0457002f0310002f0457004e0457004e0457004e0457
004e0457004e0310004e045700960457009604570096045700960000ff56
0000ff500000ff0d0000ffd7000000330000ff820000fffa0000ffc90000
ffab0000008a0000001f0000feed0000ffd70000ffd70000ffda0000ffc4
0000000a0000010e0000fe930000fe6f0000fe810000fe810000ff7a0000
00a90000feea0000fe810000fe810000fe810000fdd10000fe8e0000ffdf
0000fe160000fe7e0000fe850000fe3a0000ff1b0000ff3b0000fdfa0000
fe2c0000fe2a0000fdb90000fe5e0000fdff0000fe0c0000fded0000fcfe
0000fe1c0000ff010000fec20000fe040000fedd0000fe380000feea0000
fdfa0000fead0000fe1c0000ffe5000000650000fef40000ffbe0000002a
0000ff9c0000ffc40000fef20000fee40000ff5c0000fd110000fec00000
fe810000ff9c0000ffd50000ff9c0000fdff0000fe810000fd1f0000003c
000000460000fe3b0000ff5b0000ff680000ffcd0000ff460000ff420000
ff6f0000ff570000ff220000fe940000ff7a0000ffd40000ff7a0000fefa
02aa019202aaff6302aa002e0419003d0438001a05cc00d506ba000005cc
00d504a10032060d00200487000305c7006d04000000055600a0039b0036
0556000003b5ff7904220026039c001205b40094042d00a106c3ffd90639
ffaf05ac00c10473003d05fcff4d03b4ff9904b8000c04b8000c05930001
0488004f0628005d043f003203a4fffc0314000c04870003045ffffb038d
00360239feb605c7006d037100320371ff970556ffb80639ffbd038d002d
047300460921006d0490005005120028055600120804ffbe0564ffaf0559
ff8c0484ff5c085bffbe06e6ffaf0758ff620572ff620a8cffbe07deffaf
0412ff56031fff2d066600c70558006f05c7006d04000032063500f30448
0039063500f30448003908e4006d0715003206a7001104bd000a0972006d
067400320000fe150921006d0490005005560086038d0028037ffff20000
ff780000ffac0000003c0000003c0000fc2b0000fc4c0639ffbd04730046
0512ffd903a8005904e3ffc30400ff0605f2ffbf040cffdc0412ffcc031f
ffd1056dffb8040e0019069100dc0499003c07f6ffbe0508001a0908ffb8
061c001a05c8006a03fc003005560086038d002104e300a1063900140639
ffbf0473004605fc00f60433006306fc00480473ffe306fc00480473ffe3
031dffb80758ff80079efff7056dffb8040e0018057dff87041bff9e0639
ffbe0471ffad0639ffbe0471001a05fc00f604330063071dffbb057bff9e
02aa00c20556ff8c040000280556ff8c04000028078dff8d05c700260556
ffb8038d002d05c7006c038d00020758ff80079efff70412ffcc031fffd7
0453ffcc03c5ff520639ffbd047300460639ffbd0473004605c7006d0400
003205c7006d04000032053500080352ffe7059100cb038dff40059100cb
038dff40059100cb038dff4005fc00f60433006307c1ffda058d005904e3
002c04000029065f002c05fe0029063a0102057b006e04550102031f006e
071fff8705fcff9e07ddffbe05e1001a05c7008e0400003205b500dd07a9
00140000fe2a000000030000002400000073000000000000fe3e00000063
0000ffb80000ff730000ff840000fe4f000000110000010e0000ffb70000
ff35000000020000000d0000fe6a0000fe8a0000fe400000fde00000fe79
00000063000000240000fe550000005a0000002d0000ff380000fec00000
006500000042000000a3000000a3000000b3000000b30000012f0000010c
000000a30556ff8c040000280556ffcc040000130556ffcc040000130556
ffcc0400001305560086038d003605c7ffb60400002905c7ffb604000029
05c7ffb60400000405c7ffb60400002905c7ffb60400ffd50556ffb8038d
002d0556ffb8038d002d0556ffb8038dff850556ffb8038dffd80556ffb8
038d00100556000002aafeb805c7008e0400ff960639ffbe047300190639
ffbe047300190639ffbe047300190639ffbe0473ff930639ffbe04730019
031dff9c0239ff60031dffb80239002d0556ffbe0400000c0556ffbe0400
000c0556ffbe0400000c04e3ffbe0239ffc604e3ffbe0239ffc604e3ffbe
0239ff1e04e3ffbe0239fed1071dffbb06390014071dffbb06390014071d
ffbb0639001405c7ffbe0473001a05c7ffbe0473001a05c7ffbe04730004
05c7ffbe0473fff305c7006d0400003205c7006d0400003205c7006d0400
003205c7006d0400003204e3ffc30400ff0604e3ffc30400ff060556ffbf
031d00230556ffbf031dffc60556ffbf031dffc60556ffbf031dff140473
ffd3031dffff0473ffd3031dffff0473ffd3031dffff0473ffd3031dffff
0473ffd3031dffff04e300a30239002704e300a30239ffc604e300540239
ff3c04e300390239fedb05c700c00473004605c700c00473002805c7009d
0473fffd05c700c00473004605c700c004730046055600f3038d00390556
007a038d0034071d00fc05560039071d00fc055600390556ff840400ffa3
0556ff840400ffa304e300be038dff4004e3ffc8031dffeb04e3ffc8031d
ff7604e3ffc8031dff8c047300040239002705560039038dff4004000028
02aafeb8046d0032046d0032046d0032046d0032046d0032046d0032046d
0032046d00320556ff8c0556ff8c05bafff005bafff00556ff8c0556ff8c
0556ff8c0556ff8c03480011034800110348001103480011034800110348
0011061e005e061e008007ae006807ae00af07ae006807ae00af04640032
046400320464003204640032046400320464003204640032046400320701
005e07010086084c0068084c00af084c0068084c00af084c00e3084c00e3
0239002d0239002d023900040239002d0239002d0239002d0239002d0239
002d03e5005e03e5008005750068057500af05750068057500af057500e3
057500e3040000320400003204000032040000320400003204000032068f
00c2068f00eb081f0068081f00af07570068075700af03eb004903eb0049
03eb004903eb004903eb004903eb004903eb004903eb0049060f00eb073b
00af073b00af073b00e305c9003b05c9003b05c9003b05c9003b05c9003b
05c9003b05c9003b05c9003b06c000b606c000b608500068085000af0788
0068078800af078800e3078800e3046d0032046d00320348001103480011
04640032046400320239002d0239002d040000320400003203eb004903eb
004905c9003b05c9003b046d0032046d0032046d0032046d0032046d0032
046d0032046d0032046d00320556ff8c0556ff8c05bafff005bafff00556
ff8c0556ff8c0556ff8c0556ff8c04640010046400100464001004640010
046400100464001004640010046400100701005e07010086084c0068084c
00af084c0068084c00af084c00e3084c00e305c9003b05c9003b05c9003b
05c9003b05c9003b05c9003b05c9003b05c9003b06c000b606c000b60850
0068085000af07880068078800af078800e3078800e3046d0032046d0032
046d0032046d0032046d0032046d0032046d00320556ff8c0556ff8c0556
ff8c0556ff8c0556ff8c02aa018a02aa002e02aa018a02aa00b602aa00b9
046400100464001004640010046400320464001006820090068200660765
0090076500660639ffbe02aa00cc02aa00cc02aa01470239002d0239002d
0239fff60239fff60239002d0239002d031dffb8031dffb80449009004ad
00ca02aa011302aa011302aa014703eb004903eb004903eb004903eb0049
041fff60041fff6003eb004903eb004904e300be04e300be05ab009005ab
006605ab008702aa004602aa004602aa00f405c9003b05c9003b05c9003b
05c9003b05c9003b075700f4068f00ca078800f406c000b605f8ffee02aa
019202aa01b304e2007105560086055600860639001405c7ffbe08f6ffbf
071d00590556ffbe04e300a3095bff9e0400ffad04c10066000000460000
00460000003c000000460239000a0239feb60400ff6404e3ffc304000029
0239ff3a0473001a0239ffc50473ff990473ff9902aaffe902aaffea02aa
002402aa003402aaffd002aa006302aaffbb02aa000302aaff6402aa00d4
02aa019f02aa019102aa000a02aaffef032effa6032effa402aaffb00000
0033000000500000ffd70000fea60000feed0000fee70000fe1a00000050
00000046000000460000fe0a04e3ffc10400ff06034bff5a04b0ff4305c7
000a03e6ffdc03b80032044bffdc044bffdc03d8ffdc031fffd70239ffe6
030cffb10409ffdc0352ffdc054affdc052effdc04000032039effe203f7
001e03f7001e03f7001e05c700000385000a040000430400003203bfffdc
03f1ffaf03e80075031d00140387002703d400080530001e03e6001e0359
004f04ba004f02cbff69031ffff7033600060466ffa60325ffdc0356ff63
04e0ffdc03bfffdc04320046041bff9e03550026049b00200303002b0303
002b035f00330318002103180040035d00a3036f000f01c4002502680045
034c002e02eb002904490039038c004303a60031037600a3034700a302eb
002b0355002c02e400b1038b00e0047201060265006c026500690265006c
038d006c025100540268006c0236006c0236006c0226006c0226006c0249
000f015b003d023a0028039d0055026800550258006c022a006c0258006c
0258006c026affc5018100790263005c028a006f038200550213007802c1
001d025bffd601ff007c0261006c02b0006c024cffee015bffcc01caffcc
0263ffcc0213ffe5025bff4f01ffffe6028cffb602b0ffd5024cff670550
ffc504af00ab0545fff504b2ffb504b8009c0506ffe104ec00ae0533ff85
048fffff0000ff3a0000ff380000ff380400fff104000124047100ef0400
000008000000040000000800000002ab0000020000000155000004000000
02000000019a000000ab00000000000005560086071dffbb054aff5f05e0
004605db002905e100270556ff8c055600860400006d04e3ffbe04e3ffa9
031dffff031dffeb04120013000001cf0000feb60000fe140000003c0000
ffcb041fff0c0556002c055600860556002c04d5ffbf02f4ffeb0000fe54
000000770000fee40292ffaf0000ff38040000130400002902aafeb80639
ffc80473ffd40400fefa031dffc50364ffc1031dffff0239ffc2031dffeb
0400ff73030600550419ffd1063fff630260ffaf0239000a0400ff060387
ffe40461ffe40400001304000029039efeb804c9ff960400000c0239ffab
063900140473001a0400ff06031dff52031dffff0378feb8038d00390400
ffa3031d0005040000280400002804000029038d002d034800110348ff86
038d000202390029038dffa302a7fec70473004603c5ff56026500690207
006c0207002b0249006c0226006c0183ff880183ffac022e001e024e0078
015d0070015d0081015d0033015d0036015dff97015d005e015d003e01fe
003d036c0056036c007a024eff6e024e0055025700270258006c032f006c
01e1002a0183ffa0018300310263005d0286006c0263009f0263009b0213
006101f0005c024e0097024e0097024e000b025800790000feed0000fef9
0000fee10000ffac02aa00520265ffd60236ffe50258ffd702b8ffb80236
ffd705c7008e0556ff8c0473ffe50556008602aaffb9046d0032046d0032
046d0032046d0032046d0032046d0032046d0032046d00320239001c0239
001c0239001c0239001c0239002d0239002d0239002d0239002d03eb0049
03eb004903eb004903eb004903eb004903eb004903eb004903eb00490239
002d0239002d0239002d0239002d03eb004903eb004903eb004903eb0049
03ba00750556ffcc05c700600556ff7d0556ffb8038d002d0400fff00239
feb60647006d040000270556ffbf031d000304e300b0038dff40038d0001
038d0036038d00010239001e04d5ffbf02f4ffeb0556ff840400ffa30556
ff840400ffa30412000903370012057dff87041bff9e0000ffbe0000ffb5
0000ffdc0000ff950000ff540000ff330000fe92000000330000fe1a070a
002603d8ffdc038d000104e3ffbe0239fff504e3ffbe04e3ffc30556003e
040000280239ff7e0639ffbe047300190556ffbe0400000c04e3ffc8031d
ffeb038dfffa056affbe03a2001a04ae00390000006a000000a600000027
0000000a0000ffa70000fe6e023900290645ffbb05c7ffbe064500670000
fec10000fef00000fed40000fedf0000fecc0000fed60000fea30000feeb
0000fee20000fea30000fe8305c7006d04000027071d00fc0556003905f0
ffb80000ff700658006d04480039078100fc0634003902aa007f02ff0055
023900ec02390138040000990400009902aa014e02aa014a02aa00be02aa
ff6204e3009a0400005803dc004702c7ffca037dffd30364ffb003a7ffc7
038affe803f3004e03a3006203cc003a03da0003040000710323ffc703cf
ffe703b3fffb0400003403c0002e0400007b03a400b80400004c04000057
0239002904c9feb806bafeb806bafeb8044efe910695feb80439ffb90408
ffd3044c006204aaffbb03c3ffbb038dffbb04a6006204f4ffd3025effb9
035c00040483ffc703baffc40585ffbb0485ffc404fc005c0412ffc504fc
005c046affc503aa000003b8005c048b0087043b00b6062300c10431ffb7
0431008d0452ffcf0587ffb10606005c03baffc404fc00250412ffcb04aa
ffbb0484ffa30439ffb90439ffb90439ffb90439ffb90439ffb90439ffb9
044c006203c3ffbb03c3ffbb03c3ffbb03c3ffbb025effb9025effb9025e
ffb9025effb90485ffc404fc005c04fc005c04fc005c04fc005c04fc005c
048b0087048b0087048b0087048b00870431008d0439ffb90439ffb90439
ffb9044c0062044c0062044c0062044c006204aaffbb04aaffbb03c3ffbb
03c3ffbb03c3ffbb03c3ffbb03c3ffbb03c3ffbb04a6006204a6006204a6
006204f4ffd304a6006204f4ffd3025effb9025effb9025effb9025eff91
025effb90562ffb9035c00040483ffc703baffc403baffc403baffc403ba
ffc40485ffc40485ffc40485ffc404d1ffd304fc005c04fc005c04fc005c
046affc5046affc5046affc503aa000003aa000003aa000003aa000003aa
000003b8003503b8003a03b8005c03b8005c048b0087048b0087048b0087
048b0087048b0087048b0087062300c1062300c1062300c1062300c10431
008d0431008d0431008d0452ffcf0452ffcf0452ffcf0439ffb90587ffb1
04fc00250439ffb90408ffd3038dffbb038fffab03c3ffbb0452ffcf04f4
ffd304fc005c025effb90483ffc7043bffb50585ffbb0485ffc403e9ffdc
04fc005c04f4ffd30412ffc503e1ffcf03b8005c0431008d055c00530431
ffb7050000bb04d9ffdb0439ffb903c3ffbb04f4ffd3025effb904fc005c
04d9ffdb0431008d025effb90431008d03c3ffbb04fe0049038dffbb0456
006203aa0000025effb9025effb9035c00040618ffc50627ffd304e10049
0473ffc70450006e04e1ffd30439ffb90412ffc80408ffd3038dffbb0464
ff4803c3ffbb061fff980366ffd304dfffd304dfffd30473ffc70499ffc5
0585ffbb04f4ffd304fc005c04f4ffd30412ffc5044c006203b8005c0450
006e055c00530431ffb704e3ffd3047100a506d1ffd306d1ffd304a6005c
063effc80412ffc80448002506f9ffd30481ff8a0377ffbb02ba00aa02ba
00d902ba009502ba00a002ba00b502ba00bf02ba00b402ba010602ba00cb
02ba005a02bafff602ba002502baffe102baffec02bafff702ba000b02ba
000002ba005c02ba001702baffa604bf00310820ffba0820ffba0820ffba
0820ffba0820ffba0820ffba0820ffba06dc003205c9008805560086076a
003206fc003206fc003206fc003206fc003206fc0032063f003205e2008e
07c6ff9504bd003204bd003204bd003204bd003204bd0032050500280705
003204f1ffce04f1ffce0a53ffba08f0ffba08f0ffba0639006d0639006d
0639006d0639006d0639006d0639006d06390059063900590683003205db
006d0753003204aaffda04aaffda0587002806de003206de003206de0032
06de003206de00320608003207e0003206a9ffba055a00a0055a00a0055a
00a0053affc8053affc8079600400820ffba0820ffba0820ffba05c90088
05c9008805c9008805c90088076a003206fc003206fc003206fc003206fc
003206fc003205e2008e05e2008e05e2008e05e2008e07c6ff9507c6ff95
04bd003204bd003204bd003204bd003204bd0032050500280705003204f1
ffce04f1ffce0523ffce04f1ffce08f0ffba08f0ffba08f0ffba0639006d
0639006d0639006d07530032075300320753003204aaffda04aaffda0473
ffd30473ffd30587002805870028058700280587002806de003206de0032
06de003206de003206de003206de003207e0003207e0003207e0003207e0
0032055a00a0055a00a0053affc8053affc807050032083800a308f00028
049effbe0375003204ed009b042d00ac06390058052e004205a6ffbe0400
00a20400000d0473ffa307f1ff8705d9ff9e06dbffc30572ff0607b3ff7a
058dff820556ffbe043d001b0805ff8705a4ff9e08c3ffbe05f8001a0639
ffb80473001a05fcffbc0473001902aafeb802aafeb8041900250763ffb8
0441001e0488006d03d600320535ffdc03a9fee7071dffbb055600fa0658
002d0488002d031dffd50400003203d8000d017efee7035900c60473ffd3
04e3ffc80239ffab0400ff9605dd00c705a5ffaa060c00be0616004f0587
00c705bd0027050fffb60590ffa90721ffa9062b005c055effb60480ffb6
07d6ffb605d500ac0588010e04adffce05a500550616004f05c1003106b6
00c805860071060400e50587008d05a6ffa9058600d70692004605ad001a
067cffa905a600c705fd0056051e00530571ffa9056e0067047dffb60728
00ae065fffaf062a00b107520080019900da01fe00d8019e008101620068
01a80097026c0057047501d9063d003f044cff20042e0022047c001a0422
0034040d002203abfffd047dff9d0596ff20041e002d0478ff16024aff9e
0661ff1604190032042b002f0467000f044300190465001a043c0018047d
0043023afea90466003102ffff250481001a022eff13063e004403a3ff8a
0477001a047b003e0460004306410042047dff2003f7ffc0031d001a0641
0042044cff1f0429003405a5001804d800330239005202f400bf077a0045
077a00450616005108e300430888004308de004308c600430ac700430000
fee40305ff7b038300ab0419fff50407ff85000000770000ffc80400ff88
0400fff00639feea0471fea10a9bff150894002e05fcff99042cff35057d
ff87041bff9e052a001f05dfffac0482feb80543ffff02aa000d02aa000d
02cd00ad02aa00af055500af0200009b0800000008000000080000000800
00000800000008000000080000000ab700340240011f046b0151047100b4
027fffa00800017e07a7ff8907a70106027fffa00782004e02aaffff02aa
ffc502aaff1d073800b505f100b50639007103a300620400006404000096
04000075040000570266000107a7ff89040000b80400002e048f002707a7
ff810400008604000036061800ef040000340493009602a1005206d10036
051d00be02a1005201c70000000000000800000008000000080000000800
000008000000080000000800000008000000080000000800000008000000
08000000080000000800000005cc0024026600b1015d00810266006a0266
008c026600bd026600e602660094026600bd0266009f0266009f0266009f
0199003e0199ff75026600180266fff00266ffdd0266ffe80266fff30266
000402660025026600530266000902660025026600080266000802660008
019900000199ff3402abffce0266ffce0155ffd203bcffcc02abffd80266
ff2a01deffbe0155ffde06da009906c0009905c70083085800b405b70049
07670099046600650535002e07e700b40414ff7e073fffcb07e700530639
005d04730019047300190581ffac046d003405aafffe066c001e05c7004f
05fa006e05ec003004e3006606390082076a002c065c006905c7005805c7
00260556ffbf0799003209920093055600f30556003503c5ff5206680073
05b50014027b00420556ffbe0556ff8c076a0072052b00740314fff204ec
003a0581ffea055e000808ecffef033fffff052f008c04840030039c0029
0492004b029d004807dd00a009ba003a0462004103be00350517005b0639
005b05d6005d063900a404e3006604e300660556fffe05c7ffb604000029
038d002d023900290239feb6059d006606aa008b071200360ab9ff9c0600
00790600007907b8007906000079060000650600006f0600006a06000079
0600008c03ac0079031dffb805faffb808d7ffb8084fffb8055600f30874
00f30a5300f30ac700ca0880ffb80556ff8408a1ff840a3bff8404e3ffbe
0556008605c7ffb6071dffbb02390029044600290653002905c20029038d
003905c7003907d4003909e10039063c00290400ffa3063bffa30848ffa3
0239001e038d003604000029063900140858007805c7ffb608580078053c
001e059200860587005c060dffb6090b0078060000b102aa011402aa0114
02aa011402aa00de02aa011402aa00de037500de037500de035c00a2035c
00a2035c00dc035f00c2035f00c2035f00c206b500320000fc000000fc00
0000fbff0200ffa9046400610556008705560087048f0050040000220400
006402aa000d048f0027035f0028035f0028048f0027048f002702aaffc5
02aaffe102aa00c202aa00e002aaffc502aaff1d05f4002105f4ffce0461
00670461ff1904930096049300960493009604dc00340400013402aa01af
02d600710200009b020000070200005b0200fffc02aa0052040000b10400
00e00400ffec040000710800ffed0800ffed020000000239ffca0239ffa4
0556008602aaffdd0200ffe50400001404000090040000910225ffd901c4
0052022500fd01c401200639ffbe04730019067e00a3050c00270412000a
0412ff9203a0004203a0ffca048b0042048bffca038dffbb03aa000008bc
ff8c05f50003089bff8c05f50003082eff8c061700030749ff8c05900003
0749ff8c059000030749ff8c0590000305560065038dfffa0556ffbe0400
000c0556ffbe0400000c0556ffbe0400000c060f00ea032600ab04e3ffbe
0239001e05c7ffe60400ffc20672006d04630032097d006d0647003204e3
ffc30400ff060583001104faff4306d700d6067b006505c7006d04000027
0660006d04c00027056500be03f2006d04bc000803e9ffd30556004c038d
ff73071d00fc05560039043f002c0403001104e3ffc10400ff0604e3ffc1
0400ff060497ff140374ff2a038300190383ffa1049affc6049aff4c0400
00570400ffdf027d006b055b0029037900220765001405a7001a03640023
0595ffc505e0002703d9ffae05c7006d040000340435ff3f031dffb60416
0031040cffd7040cff5f04e300e00239001e0630ff3f0473ffa60435ff3f
031dffb605200086035000360639011d03ea007305c7ffbe0473001a0556
0008038dffde038d00360473001905ec000e053dffc60556ff3002aafeb8
064e0050045e003205fa005004290032064e0050046b003205c7ffec0400
ff960556ffbe0400ffa705c7ffbe0473ffc70556ffbf031dffd60473ffd3
031dffff06b100360412ffcc06580037057b00560556ffe604e3ffbd0400
00190594ff470556ff4d0419ff54079b006b05c9003b0574ffe403c70037
03c9006c063900500556011404e3009f071dffbb031dff39091aff8c0477
ffd00598001303780020038dffc604b0000002aafeb80400ffd50322003c
029e000102790050062800140443001a0427001903faffea03faffea0400
00320601003205c7002405c7002406470032064700320441ffe20489ffc5
02ea0023042b00230392ffdd0520ffdd0395002f04fd002f02a7feb80473
00450473001e0639003c063900280473000c03b8ff5103b2ff1103b2fece
0400ffa30400fe8a0400fe8a0400fe7d038dff4002aa00830292004b01f1
008801f100a1029f0056058d003b059fffaf05af003606700046044f0047
04d9ffdb0556ffcc04e3ffd700>
<000000000000007600000076000000760000007600000076000000760000
007600000076000000760000007600000076000000760000007600000076
00000076000000f8000000f8000000f8000000f8000000f8000000f80000
00f8000000f8000000f8000000f8000000f8000000f8000000f8000000f8
000000f8000000f8000000f8000000f8000000f8000000f8000000f80000
00f8000000f8000000f8000000f8000000f8000000f8000000f8000000f8
000000f8000000f8000000f8000000f8000000f8000000f8000001e40000
01e4000001e4000001e4000001e400000374000003740000037400000374
000003740000037400000374000003740000037400000374000003740000
037400000374000003740000037400000484000006740000067400000674
000006740000067400000674000006740000067400000674000009280000
0b0800000b0800000b0800000b0800000b0800000b0800000cd200000ee8
00000ee800000ee8000010b6000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000012400000124000001240000012400000124000001240
000012400000124000001240000012400000124000001240000012400000
124000001240000100000dfa00f2003c0091000600020010002f00560000
04a50209000400020000000e00ae0000000300000000021a000000000003
000000070076021a0001000000000000010d029000010000000000030023
039d0001000000000004002303c00001000000000006002303e300010000
00000007003b04060003000104090000021e04410003000104090001002c
065f0003000104090002000e068b00030001040900030046069900030001
04090004004606df00030001040900060046072500030001040900070076
076b00a90020003200300031003700200054006800650020004d006f006e
006f007400790070006500200043006f00720070006f0072006100740069
006f006e002e00200041006c006c00200052006900670068007400730020
00520065007300650072007600650064002e0020000d000d004800650062
0072006500770020004f00700065006e00540079007000650020004c0061
0079006f007500740020006c006f00670069006300200063006f00700079
00720069006700680074002000a900200032003000300033002000260020
0032003000300037002c002000520061006c00700068002000480061006e
0063006f0063006b002000260020004a006f0068006e0020004800750064
0073006f006e002e002000540068006900730020006c00610079006f0075
00740020006c006f00670069006300200066006f00720020004200690062
006c006900630061006c0020004800650062007200650077002000690073
0020006f00700065006e00200073006f007500720063006500200073006f
00660074007700610072006500200075006e006400650072002000740068
00650020004d004900540020004c006900630065006e00730065003b0020
00730065006500200065006d0062006500640064006500640020006c0069
00630065006e007300650020006400650073006300720069007000740069
006f006e00200066006f0072002000640065007400610069006c0073002e
00540069006d006500730020004e0065007700200052006f006d0061006e
00200069007300200061002000740072006100640065006d00610072006b
0020006f006600200054006800650020004d006f006e006f007400790070
006500200043006f00720070006f0072006100740069006f006e002ea920
3230313720546865204d6f6e6f7479706520436f72706f726174696f6e2e
20416c6c205269676874732052657365727665642e200d0d486562726577
204f70656e54797065204c61796f7574206c6f67696320636f7079726967
687420a92032303033202620323030372c2052616c70682048616e636f63
6b2026204a6f686e20487564736f6e2e2054686973206c61796f7574206c
6f67696320666f72204269626c6963616c20486562726577206973206f70
656e20736f7572636520736f66747761726520756e64657220746865204d
4954204c6963656e73653b2073656520656d626564646564206c6963656e
7365206465736372697074696f6e20666f722064657461696c732e46424d
4b49482b54696d65734e6577526f6d616e50532d426f6c644974616c6963
4d5446424d4b49482b54696d65734e6577526f6d616e50532d426f6c6449
74616c69634d5446424d4b49482b54696d65734e6577526f6d616e50532d
426f6c644974616c69634d5454696d6573204e657720526f6d616e206973
20612074726164656d61726b206f6620546865204d6f6e6f747970652043
6f72706f726174696f6e2e00a90020003200300031003700200054006800
650020004d006f006e006f007400790070006500200043006f0072007000
6f0072006100740069006f006e002e00200041006c006c00200052006900
67006800740073002000520065007300650072007600650064002e002000
0d000a000d000a0048006500620072006500770020004f00700065006e00
540079007000650020004c00610079006f007500740020006c006f006700
69006300200063006f0070007900720069006700680074002000a9002000
320030003000330020002600200032003000300037002c00200052006100
6c00700068002000480061006e0063006f0063006b002000260020004a00
6f0068006e00200048007500640073006f006e002e002000540068006900
730020006c00610079006f007500740020006c006f006700690063002000
66006f00720020004200690062006c006900630061006c00200048006500
620072006500770020006900730020006f00700065006e00200073006f00
7500720063006500200073006f0066007400770061007200650020007500
6e00640065007200200074006800650020004d004900540020004c006900
630065006e00730065003b002000730065006500200065006d0062006500
640064006500640020006c006900630065006e0073006500200064006500
73006300720069007000740069006f006e00200066006f00720020006400
65007400610069006c0073002e00460042004d004b00490048002b005400
69006d00650073004e006500770052006f006d0061006e00500053005200
6500670075006c0061007200460042004d004b00490048002b0054006900
6d00650073004e006500770052006f006d0061006e00500053002d004200
6f006c0064004900740061006c00690063004d005400460042004d004b00
490048002b00540069006d00650073004e006500770052006f006d006100
6e00500053002d0042006f006c0064004900740061006c00690063004d00
5400460042004d004b00490048002b00540069006d00650073004e006500
770052006f006d0061006e00500053002d0042006f006c00640049007400
61006c00690063004d005400540069006d006500730020004e0065007700
200052006f006d0061006e00200069007300200061002000740072006100
640065006d00610072006b0020006f006600200054006800650020004d00
6f006e006f007400790070006500200043006f00720070006f0072006100
740069006f006e002e00410c005403d302c9001d001f03d303d303d203d1
003c001f03d1b2061d1fb903ca03c9b2351f00411503c2003003c2004003
c200a003c200b003c20005008003c0009f03c000af03c000cf03c00004ff
c003c0b345453240b803c0b32b2e3240b803c0b2282932b9ffc003c0b21a
2632bd03c002c80027001fffc003beb2161b32b9ffc003bdb2424232b9ff
c003bdb2363832b9ffc003bdb32a2d32df410a03bd00ef03bd000203bd03
be0028001fffc003beb3282e32f0b803beb5019006900702b9ff8002c8b2
313340b802c8b31c333210411b02c8006002c8007002c80003000f02c800
af02c8000200b002c800e002c80002005f02c800a002c80002002f02c800
3f02c8004f02c840a8030100000340cd383b32404d383b32a41fb41fc01f
d01fe41f05501f641f741f841f04041f141f241f341f441f05e41ff41f02
ab1fbb1fcb1f03cfcddbcd028bcd9bcdafcdbfcd04cdcdcd4ddb4d028b4d
9b4dad4dbd4d044d4d377f047f05027f027f03020f0301cf03df03ef03ff
03048f039f03af03bf03044f035f036f037f03049f02af02bf02cf02049f
03af03bf03cf03045f036f037f038f03041f032f033f034f03047f411e03
660001006f03660001005f03660001004f03660001003f03660001002f03
660001001f03660001000f0366000100ff0366000100ef036600010366b2
21370f412402dd0001005f02dd009f02dd00df02dd0003002f02dd003f02
dd006f02dd0003009f02c900df02c90002000f02c9001f02c9003f02c900
5f02c9000402dd02dd02c902c902c802c840140100010100090102000800
17170000001211084041110286019e003f000d013d003f000d0116003f00
0d026f0083000d02170083000d0174b7830df3830d76830d410d02350024
000d02180024000d02030024000d01610024000d01134017240da6240d95
240d82240d6f240d5b240d46240d22240d410d0249001e000d020e001e00
0d01c1001e000d01a3001e000d0178401d1e0df61e0df11e0de21e0ddd1e
0dce1e0d751e0d701e0d651e0d521e0dbb02140037000d01a0400b370dfb
370d2d370d1d370db80215b40f440f0009bb02150044000d023cb24d1d1f
b8023ab24d1f1fb80237b24d2a1fbc0232004d0201001f022eb21f931f41
09022c001f0125001f022b001f0156001f022ab21f931f410d0228014000
79001f021f016d0156001f021e00330401001f021db233e41fb8021bb233
411fb80216b2212d1fb801c3b24d1e1fb801bfb24d931fb801beb24dcd1f
bc01bb004d0201001f01b7b21f671f410d01b601400089001f01b2003604
01001f01b10036019a001f01b0b236bb1fb801afb236ab1f410901ad016d
0067001f01ac016d0072001f01a6b2212c1fb801a5b221351fb801a4b221
3b1fb801a2b2215e1fbc01a100350201001f017bb24d931fbc0179004d04
01001f0176b24dcd1f41150175001f0125001f01730140006c001f017000
36019a001f016f00360125001f016b00330401001f0169b233811f410901
6600210125001f0163003b0125001f0147b24d221f410d0143001f010100
1f013b003302ab001f013a00330101001f0139b233341fb80136b2212e1f
bc013300210401001f0132b23bab1fbc011f01400081001f0119b2212d1f
b80117b221471fb80111b235cd1fb80108b24d791fb80106b21fab1fb801
05b236721fb80100b721471ff51fe41ff4b90140080140131fef332c1fee
212e1fed214c1fe04dcd1fdf4db80101b21fdc1fb80125b51fdb1fcd1fda
b901400801b61fd936891fd621b80156b21fd53bb80156b21fcd4db80156
b21fcc4dbb0101001f00ca0140b29e1fc9b9016d0156b21fc733b8080140
0b1fc2333b1fc133381fbe21b80125b21fbb3bbb0801001f00b3016db29e
1fa7b80140b76c1fa321cd1fa235b8019a400f1fa13bab1f99215e1f8c35
e41f841fb80401b61f8121381f7f21b80125b61f7b334c1f7935b8019ab6
1f714d271f6e3bb80101400f1f664d4a1f6321891f6033521f5a3bbb019a
001f0058016db2721f57b9016d0801b51f55212e1f4fb80140b76c1f4c36
9e1f4b35b80401b21f493bb80201400b1f483bcd1f45212a1f433bb80125
40161f424d521f414dcd1f4033891f39366c1f2e21301f2cb80140b2791f
2bb901400401b61f2833e41f2735b8019ab21f5537bc0257000701d60007
0187402e07de07a8079e0756073e07340730072907260725072007140812
0810080e080c080a080808060804080208000814b8ffe0402c0000010014
061000000100060400000100041000000100100200000100020000000100
0002010802004a009fbd028600af028600bf02860003b013034b024b5342
b0372b4bb807ff52b0382b4bb007505b58b101018e59014bb0c063004b62
20b0f65323b8010a515ab005234201b0124b004b544218b0382bb00288b8
01005458b801ffb101018e851bb0124358b900010139858d1bb90001013c
858d595901b0372b730016763f183f123e113946443e113946443e113946
443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b18
2b2b2b2b2b2b2b2b2b2b2b2b2b2b182b1db0964b5358b0aa1d59b0324b53
58b0ff1d594bb02753205c58b9028802864544b90287028645445958b901
240288455258b9028801244459594bb03053205c58b9016d02884544b902
88028845445958b90162016d455258b9016d01624459594bb04353205c58
b9001f02874544b9004d028745445958b9025e001f455258b9001f025e44
59594bb8012553205c58b9003602884544b9003a028845445958b9089700
36455258b9003608974459594bb8040153205c58b90140003a4544b13a3a
45445958b91ee00140455258b901401ee04459594bb00c53205c58b13b3b
4544b1333b45445958b1123b455258b13b124459594bb03153205c58b13b
3b4544b1213b45445958b1503b455258b13b504459594bb03953205c58b1
3b3b4544b1353b45445958b15d3b455258b13b5d4459592b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b45695342014b5058b108004259435c58b1080042591610703eb0
124358b911a63d851bba011b03d9000b2b59b00a2342b00b2342003f3f18
2b103c012f4bb00d5458b90001ffb038594bb00c5458b90001ffb0385906
0cb0062342b0072342b0124358b93b21187e1bba040001a8000b2b59b00c
2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342b0
0f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b0112342
00184569444569441845694473737373742b454474747575757575757575
00757575757474747573732b45186944747445186944747474747575752b
2b0000454445447373737475002b2b73752b2b732b2b2b2b2b2b2b2b2b75
732b002b2b4569442b2b000000>
[4673 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 118 15 <0001ffc6feb701680131001200414010b202b00302c5120101ac00b7800d
010db8038ab5002f20010101b80165400b0a050510410a5f135eab182b10
f6ed392f10f45de4003f5dfded3130015d00710327363736353426272635
3436333216151406231799251d67110d61454363bffeb72a572d2323275f
211927415e6a4f7df200>XBAAAA+TimesNewRomanPS-BoldItalicMT AddT42Char 
2 2344 81 <0001001afff40407039f0034013e4097123d297904025820532a5036030b
200b2c30367036042518370c470c46295c325c3367089608992ca608aa2c
b70ee0360d0418141802292a2a002d2c2b2b2e0e171a0a01290129002a18
d317a4090e0e361d22142240140c3f1d1d222a0000362e2b142e40140c3f
2e2e2b253306060032d3337e343400072b2a0a173f1740179017a0170417
a71a0b1d3528221d2e2b100ea7c41d011db8032a40122b332a32eb2eb22b
19351d172b171d350a64b9034900182b2b103c2b2b4e10f44df4f4e410f4
5ded2b103c103c2b10c0003f7ae95d182f3f3c3f3c10f4ed103c10ed8705
2e012b2b7d10c4870e2e18012b2b0e7d10c40118f6ed111239390039392b
111239870e7d10c4c4870e10c43130015d5d7172005d01435c58b9000cff
e2b30f113e1fb8ffec400f0f113e211e11392d1e10392c1e0f392b2b2b2b
2b5901033637363633321615140703061514163332373637363717062322
2635343713363534262322070603032313363534262623372502237c7d3e
5b843a344a1880100f080a0b232409142693a23e46187d0d120c26368a81
52ffbb1b1024320b0151039ffe53bc4564484d3e3850fe5538110a10081d
350e1c17f740302a5301ab2a140b113484fefbfed702825f2811170d263b
>XBAAAA+TimesNewRomanPS-BoldItalicMT AddT42Char 
2 2824 87 <00010027ffe4027e0493001d0167b90005ffe2b2133905b8ffe240870f39
291a361a0220022003220e200f2210241c241d3002300337104002400344
0f43104f194f1a421d570058185b195b1a571d6600650265036f196f1a60
1c661d740274037b197b1a7f1f84028403850f8b198b1a9002900397059a
1aaa03af19b602b603c600c403c61dd300d31de302e3033601040707000f
0a0e121b001a19181d00151919b80118400f186003500f010fd340930ea0
0e020eb80340401e07600700002b1815141840140c3f1818153f0e400e90
0ea00e040ea71219ba016800030168b2011d00b80142401001120b010615
1e2818151004c807a715b8ffc0b3121e3f15b8ffe0b336373415b8ffe040
0f1e313415ba1e091517151e0a2368182b2b103c2b2b10f62b2b012b01fd
e42b103c2b10c0003f3f10f43c10eded10ed5d87052e012b2b0e7d10c401
1a1810fe5d1afd5d321a7a10e8182f111239111239123900111239398705
7d10c4c43130015d005d012b2b0103330723030615141633323736371706
06232226353437132337363637024b50832381a710120b11122e3d2345a6
50444b1a9e881480b07c0493fef073fdbc361c0d130e235716787045353a
5b021d4a2f7e8c00>XBAAAA+TimesNewRomanPS-BoldItalicMT AddT42Char 
2 0 0 <0002011c0000051c050000030007004db10201bb010f000600070272b200
0504b8010fb403000a0704b8010fb5010019080605bf010f000200030144
00090120012b00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd
3c31302111211125211121011c0400fc2003c0fc400500fb002004c0>XBAAAA+TimesNewRomanPS-BoldItalicMT AddT42Char 
XBAAAA+TimesNewRomanPS-BoldItalicMT /CharStrings get begin
/comma 15 def
/n 81 def
/t 87 def
end
XBAAAA+TimesNewRomanPS-BoldItalicMT /Encoding get
dup 44 /comma put
dup 110 /n put
dup 116 /t put
pop
end
%ADOEndSubsetFont
/ISRTZM+TimesNewRomanPS-BoldItalicMT /XBAAAA+TimesNewRomanPS-BoldItalicMT findfont ct_VMDictPut
/ISRTZM+TimesNewRomanPS-BoldItalicMT*1 
[44{/.notdef}rp /comma 65{/.notdef}rp /n 5{/.notdef}rp /t 139{/.notdef}rp]
ISRTZM+TimesNewRomanPS-BoldItalicMT nf
ISRTZM+TimesNewRomanPS-BoldItalicMT*1 [12 0 0 -12 0 0 ]msf
341.742 396.336 mo
(t,n)
[3.336 3 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/ISRTZH+TimesNewRomanPS-BoldItalicMT*1 uf
/ISRTZH+TimesNewRomanPS-BoldItalicMT uf
/VBAAAA+TimesNewRomanPS-BoldItalicMT uf
/ISRTZM+TimesNewRomanPS-BoldItalicMT*1 uf
/ISRTZM+TimesNewRomanPS-BoldItalicMT uf
/XBAAAA+TimesNewRomanPS-BoldItalicMT uf
/ISRTZL+TimesNewRoman,BoldItalic-Identity-H uf
/ISRTZL+TimesNewRoman,BoldItalic /CIDFont ur
/ISRTZJ+TimesNewRomanPS-BoldMT-Identity-H uf
/ISRTZJ+TimesNewRomanPS-BoldMT /CIDFont ur
/ISRTZK+SymbolMT-Identity-H uf
/ISRTZK+SymbolMT /CIDFont ur
/ISRTZI+Symbol*1 uf
/ISRTZI+Symbol uf
/SBAAAA+Symbol uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
